{"version":3,"sources":["constants/field-names.ts","components/icons/index.tsx","components/Category/Category.tsx","constants/test-ids.ts","components/FormItem/FormItem.props.ts","components/CategoryForm/CategoryForm.tsx","components/CategoryForm/CategoryForm.container.tsx","components/TaskHeader/TaskHeader.tsx","components/UncontrolledInput/UncontrolledInput.tsx","components/UncontrolledTextArea/UncontrolledTextArea.tsx","components/FormField/FormField.tsx","components/FormItem/FormItem.tsx","patterns/AddForm/AddForm.props.ts","components/TasksFilters/TasksFilters.tsx","patterns/Task/Task.tsx","HOCs/tree/generateTree.tsx","patterns/TaskForm/components/CategoriesTree/CategoriesTree.tsx","patterns/TaskForm/components/TaskCompleted/TaskCompleted.tsx","patterns/TaskForm/constants/index.ts","patterns/TaskForm/TaskForm.tsx","patterns/UndoRedoButtons/UndoRedoButtons.tsx","patterns/Header/Header.tsx","patterns/EditCategoriesDialog/EditCategoriesDialog.tsx","patterns/WorldMap/WorldMap.tsx","patterns/AddForm/AddForm.tsx","patterns/AddForm/AddForm.container.tsx","actions/actionTitles.ts","actions/actions.ts","selectors/pathsSelectors.ts","selectors/entitiesSelectors.ts","selectors/operationSelectors.ts","selectors/validationSelectors.ts","selectors/categorySelectors.ts","selectors/tasksSelectors.ts","sagas/addCategorySaga.ts","sagas/addSubCategorySaga.ts","sagas/addTaskSaga.ts","sagas/deleteCategorySaga.ts","sagas/deleteTaskSaga.ts","sagas/editCategorySaga.ts","sagas/editTaskSaga.ts","sagas/editTaskStatusSaga.ts","sagas/redoOperationSaga.ts","sagas/sagaExecutor.ts","sagas/undoOperationSaga.ts","sagas/validationSaga.ts","sagas/editTaskLocationSaga.ts","contexts/EditCategoryContext/EditCategoryContext.props.ts","utils/index.ts","contexts/EditCategoryContext/EditCategoryContext.tsx","contexts/EditTaskContext/EditTaskContext.tsx","containers/CategoryContainer/CategoryContainer.tsx","containers/CategoriesTreeContainer/CategoriesTreeContainer.tsx","containers/AddCategoryContainer/AddCategoryContainer.tsx","containers/HeaderContainer/HeaderContainer.tsx","containers/AddTaskContainer/AddTaskContainer.tsx","containers/TaskContainer/TaskContainer.tsx","containers/TasksListContainer/TasksListContainer.tsx","containers/TasksFilersContainer/TasksFiltersContainer.tsx","containers/WorldMapContainer/WorldMapContainer.tsx","containers/ContentContainer/ContentContainer.tsx","assets/images/background.jpg","reducers/initialState/initialMappedTasksState.ts","reducers/initialState/index.ts","reducers/updateCategories.ts","reducers/updateMappedTasks.ts","reducers/filterTasks.ts","reducers/calculateTaskRatio.ts","reducers/reDo.ts","reducers/unDo.ts","reducers/switchMapPicker.ts","reducers/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FORM_FIELDS","iconStyle","css","StyledPlusIcon","styled","PlusOutlined","StyledEditIcon","EditOutlined","StyledDeleteIcon","DeleteOutlined","StyledLink","Link","Category","path","title","onOpenEditModal","onOpenAddModal","onOpenDeleteModal","editIconTestId","addIconTestId","deleteIconTestId","to","onClick","memo","TEST_IDS","DIRECTION","JUSTIFY_CONTENT_TYPES","Text","Typography","CategoryForm","inputRef","onSubmit","titleError","errors","children","formId","props","id","autoComplete","className","ref","type","message","WrappedCategoryForm","forwardRef","CategoryFormContainer","sendData","defaultValues","resetAfterSubmit","validateOnMatch","refToCancelSubmit","useForm","handleSubmit","register","reset","setError","formState","submitData","useCallback","a","CATEGORY_TITLE","cancelSubmit","useEffect","current","required","StyledLabel","span","isChosen","StyledButton","Button","TaskHeader","isCompleted","toggleComplete","onChoose","onEnableMap","checkBoxTestId","checked","onChange","role","UncontrolledInput","WrappedInput","StyledTextArea","textarea","UncontrolledTextArea","WrappedTextArea","ControlledFormField","rules","Component","as","fieldName","valuePropName","control","useFormContext","name","render","field","value","error","fieldState","UncontrolledFormField","NAME_TYPE","LabelWrapper","div","Wrapper","attrs","flexDirection","justifyContent","COLUMN","FLEX_START","FLEX_END","FieldWrapper","FormItem","labelName","htmlFor","TasksFilters","showDone","searchKey","onSwitchDone","onChangeSearch","defaultChecked","placeholder","style","width","defaultValue","Panel","Collapse","StyledCard","Card","Task","description","bordered","header","TreeNode","AntTree","StyledTreeNode","StyledTree","generateTree","TreeNodeTitle","getTreeNode","nodeInfo","getChildNodes","getTreeNodes","nodesInfo","map","length","onSelectNode","selectedKeys","expandedKeys","draggable","onSelect","defaultExpandedKeys","StyledText","p","Categories","CategoriesTree","useMemo","split","reduce","acc","index","arr","concat","TaskCompleted","FIELD_IDS","TITLE","IS_COMPLETED","DESCRIPTION","labelNames","TASK_PLACEMENT","TASK_TITLE","TASK_FINISHED","TASK_DESCRIPTION","errorMessages","TaskForm","visible","onClose","saveButtonTitle","cancelButtonTitle","methods","sendDataHandler","values","onCancel","onOk","okText","cancelButtonProps","ROW","UndoRedoButtons","onRedo","onUndo","isReDoDisabled","isUnDoDisabled","Group","size","disabled","StyledHeader","h1","StyledPropgressBar","Progress","Header","percentage","percent","strokeColor","showInfo","EditCategoriesDialog","onToggle","operationTitle","resetAfterCancel","footerSubmitButton","refToCancelSubmitHandler","useRef","handleSendData","handleCancel","footer","JSON","stringify","StyledMapContainer","Map","WorldMap","coords","center","zoom","TileLayer","url","attribution","Marker","position","AntText","Form","form","StyledInput","input","AddForm","onBlurForm","addButtonName","onBlur","htmlType","WrappedAddform","AddFormContainer","onAddItem","submit","handleBlurForm","setTimeout","SAGA_ACTION_TITLES","TASK_RATIO_ACTIONS","TASKS_FILTER_ACTIONS","startAddCategoryProcess","createAction","START_ADD_CATEGORY_PROCESS","startAddSubCategoryProcess","START_ADD_SUB_CATEGORY_PROCESS","startDeleteCategoryProcess","START_DELETE_CATEGORY_PROCESS","startEditCategoryProcess","START_EDIT_CATEGORY_PROCESS","startEditTaskStatusProcess","START_EDIT_TASK_STATUS_PROCESS","startAddTaskProcess","START_ADD_TASK_PROCESS","startEditTaskProcess","START_DELETE_TASK_PROCESS","START_EDIT_TASK_PROCESS","startEditTaskLocationProcess","START_EDIT_TASK_LOCATION","addCategory","addSubCategory","deleteCategory","editCategory","insertCategory","addTask","editTaskStatus","editTask","deleteTask","editTaskLocation","showDoneTasks","SHOW_DONE","searchTasks","SEARCH_TASK","calculateRatio","CALCULATE_RATIO","startUnDoProcess","startReDoProcess","addToUnDo","deleteFromUnDo","addToReDo","deleteFromReDo","clearReDo","switchMapPicker","getLastCategoryPathAndId","updateCategories","lastIndex","get","toArray","getIn","getLastSubCategoryPathParamAndId","lastSubCategoryIndex","pathParam","getTask","updateMappedTasks","toObject","getCategory","getUndoOperationConfig","unDo","_","undoOperations","getRedoOperationConfig","reDo","redoOperations","getOperationsAmount","unDoAmount","reDoAmount","isTheSameNameTaskExist","taskId","reduction","Boolean","isTheSameNameCategoryExist","state","entity","getEntitiesTitles","includes","getSubCategories","subCategories","subCategory","num","childrenCategories","getCategories","category","getChosenTaskUrl","getVisibilityOfTasks","isDisplayed","getTasksFilters","filterTasks","getCompletedTasksRatio","calculateTaskRatio","done","all","addCategorySaga","addCategoryWatcher","payload","put","select","undoOperation","redoOperation","obj","takeEvery","addSubCategorySaga","addSubCategoryWatcher","addTaskSaga","addTaskWatcher","call","uniqid","deleteCategorySaga","deleteCategoryWatcher","deleteTaskSaga","deleteTaskWatcher","task","location","editCategorySaga","editCategoryWatcher","bind","editTaskSaga","editTaskWatcher","newPath","editTaskStatusSaga","editTaskStatusWatcher","redoOperationSaga","redoOperationWatcher","sagaMiddleware","createSagaMiddleware","execute","saga","args","run","toPromise","undoOperationSaga","undoOperationWatcher","categoryValidationSaga","taskValidationSaga","editTaskLocationSaga","editTaskLocationWatcher","OPERATION_TYPE","getPathParam","savingPath","param","getSavingPath","pop","EditCategoryContext","createContext","onSetCategoryData","OPERATION_TITLES","ADD","EDIT","DELETE","RESET_AFTER_SUBMIT_VALUES","EditCategoryProvider","useState","operationType","setCategoryData","setVisible","dispatch","useDispatch","handleClose","handleSetCategoryData","categoryTitle","other","entityTitle","sagaExecutor","Promise","resolve","Provider","undefined","customEqualityCheck","prev","next","is","List","merge","EditTaskContext","onSetTaskData","initialValues","EditTaskProvider","initialTaskData","setInitialTaskData","key","setKey","categories","useSelector","handleSetTaskData","data","previous","categoryId","taskTitle","CategoryContainer","useContext","Tree","CategoriesTreeContainer","AddCategoryContainer","handleAddCategory","HeaderContainer","handleUndo","handleRedo","AddTaskContainer","useParams","handleAddTask","TaskContainer","handleToggleCompleted","target","handleChoose","handleOpenEditModal","handleEnableMap","StyledList","ImmutableList","TasksListContainer","tasks","Object","taskMap","getTasksByCategoryId","filteredTasks","filter","match","itemLayout","dataSource","renderItem","Item","TasksFiltersContainer","isDoneShown","searchPattern","handleSwitchDone","handleChangeSearch","WorldMapContainer","chosenTaskUrl","chosenTask","taskLocation","handleClickLocation","latlng","keys","StyledContentWrapper","ContentContainer","initialMappedTasksState","initialState","handleActions","update","push","updateIn","deleteIn","set","insert","setIn","tasksMap","dropRight","pickSituationOnMap","reducer","combineReducers","rootSaga","Sider","Layout","ContentWrapper","Content","StyledSider","Main","MainLayout","background","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","hasSider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.48e1b436.chunk.js","sourcesContent":["enum FORM_FIELDS {\n  CATEGORY_TITLE = 'title',\n  TASK_PLACEMENT = 'taskPlacement',\n  TASK_TITLE = 'taskTitle',\n  TASK_FINISHED = 'taskFinished',\n  TASK_DESCRIPTION = 'taskDescription',\n}\n\nexport default FORM_FIELDS;\n","import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport styled, { css } from 'styled-components';\n\nconst iconStyle = css`\n  font-size: 14px;\n  &:hover {\n    color: rgb(0, 225, 255);\n    cursor: pointer;\n  }\n`;\n\nexport const StyledPlusIcon = styled(PlusOutlined)`\n  ${iconStyle}\n`;\n\nexport const StyledEditIcon = styled(EditOutlined)`\n  ${iconStyle}\n`;\n\nexport const StyledDeleteIcon = styled(DeleteOutlined)`\n  ${iconStyle}\n`;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { StyledPlusIcon, StyledEditIcon, StyledDeleteIcon } from '../icons';\nimport CategoryProps from './Category.props';\n\nconst StyledLink = styled(Link)`\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell,\n    'Open Sans', 'Helvetica Neue';\n  font-size: 14px;\n  text-decoration: none;\n  color: #40a9ff;\n  font-weight: 400;\n`;\n\nconst Category: React.FC<CategoryProps> = ({\n  path,\n  title,\n  onOpenEditModal,\n  onOpenAddModal,\n  onOpenDeleteModal,\n  editIconTestId,\n  addIconTestId,\n  deleteIconTestId,\n}) => (\n  <div>\n    <span>\n      <StyledLink to={`/${path}`}>{title}</StyledLink>\n      <StyledEditIcon data-testid={editIconTestId} onClick={onOpenEditModal} />\n      <StyledPlusIcon data-testid={addIconTestId} onClick={onOpenAddModal} />\n      <StyledDeleteIcon data-testid={deleteIconTestId} onClick={onOpenDeleteModal} />\n    </span>\n  </div>\n);\n\nexport default memo(Category);\n","enum TEST_IDS {\n  EDIT_ICON = 'edit-icon',\n  ADD_ICON = 'add-icon',\n  DELETE_ICON = 'delete-icon',\n}\n\nexport const categoryFormTestId = 'category-form-test-id';\nexport const categoryFormInputTestId = 'category-form-input-test-id';\nexport const addFormTestId = 'add-form-test-id';\nexport const addFormInputTestId = 'add-form-input-test-id';\n\nexport default TEST_IDS;\n","import { ReactElement } from 'react';\n\nexport enum DIRECTION {\n  ROW = 'row',\n  COLUMN = 'column',\n}\n\nexport enum JUSTIFY_CONTENT_TYPES {\n  FLEX_START = 'flex-start',\n  FLEX_END = 'flex-end',\n}\n\nexport type WrapperProps = {\n  flexDirection: DIRECTION;\n};\n\nexport type ExtendedWrapperProps = WrapperProps & {\n  justifyContent?: JUSTIFY_CONTENT_TYPES;\n};\n\nexport type FormItemProps = WrapperProps & {\n  labelName: string;\n  children: ReactElement;\n  htmlFor?: string;\n};\n","import React, { memo, forwardRef, ForwardRefRenderFunction } from 'react';\nimport { Typography } from 'antd';\nimport { categoryFormTestId, categoryFormInputTestId } from 'constants/test-ids';\n\nimport { RefInputType } from 'types';\nimport { CategoryFormProps } from './CategoryForm.props';\n\nconst { Text } = Typography;\n\nconst CategoryForm: ForwardRefRenderFunction<RefInputType, CategoryFormProps> = (\n  { onSubmit, errors: { title: titleError }, children, formId, ...props },\n  inputRef,\n) => (\n  <form id={formId} data-testid={categoryFormTestId} autoComplete=\"off\" onSubmit={onSubmit}>\n    {children || (\n      <>\n        <input\n          className=\"ant-input\"\n          data-testid={categoryFormInputTestId}\n          ref={inputRef as RefInputType}\n          {...props}\n        />\n        {titleError && <Text type=\"danger\">{titleError.message}</Text>}\n      </>\n    )}\n  </form>\n);\n\nconst WrappedCategoryForm = forwardRef<RefInputType, CategoryFormProps>(CategoryForm);\n\nexport default memo(WrappedCategoryForm);\n","import React, { memo, useEffect, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport FORM_FIELDS from 'constants/field-names';\nimport CategoryForm from './CategoryForm';\nimport { CategoryFormContainerProps, SendDataType } from './CategoryForm.props';\n\nexport const requiredMessage = 'Title can`t be empty';\n\nconst CategoryFormContainer: React.FC<CategoryFormContainerProps> = ({\n  sendData,\n  defaultValues,\n  children,\n  resetAfterSubmit = false,\n  validateOnMatch,\n  refToCancelSubmit,\n  formId,\n}) => {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    setError,\n    formState: { errors },\n  } = useForm<SendDataType>({ defaultValues });\n\n  const submitData = useCallback(\n    async ({ [FORM_FIELDS.CATEGORY_TITLE]: title }: SendDataType) => {\n      const isError = (await validateOnMatch?.(title)) || false;\n      if (isError) {\n        setError(FORM_FIELDS.CATEGORY_TITLE, {\n          type: 'notMatch',\n          message: 'An item with such name exists',\n        });\n      } else {\n        sendData({ [FORM_FIELDS.CATEGORY_TITLE]: title });\n        if (resetAfterSubmit) {\n          reset({ ...defaultValues });\n        }\n      }\n    },\n    [sendData, setError, validateOnMatch, defaultValues, reset, resetAfterSubmit],\n  );\n\n  const cancelSubmit = useCallback(() => {\n    reset({ ...defaultValues });\n  }, [reset, defaultValues]);\n\n  useEffect(() => {\n    if (refToCancelSubmit) {\n      // eslint-disable-next-line no-param-reassign\n      refToCancelSubmit.current = cancelSubmit;\n    }\n  }, [cancelSubmit, refToCancelSubmit]);\n\n  return (\n    <CategoryForm\n      onSubmit={handleSubmit(submitData)}\n      errors={errors}\n      formId={formId}\n      {...register(FORM_FIELDS.CATEGORY_TITLE, { required: requiredMessage })}\n    >\n      {children}\n    </CategoryForm>\n  );\n};\n\nexport default memo(CategoryFormContainer);\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { Checkbox, Button } from 'antd';\nimport { StyledEditIcon } from '../icons';\nimport { LabelProps, TaskHeaderProps } from './TaskHeader.props';\nimport 'antd/dist/antd.css';\n\nconst StyledLabel = styled.span`\n  padding: 0 10px 0;\n  cursor: pointer;\n  color: ${({ isChosen }: LabelProps) => (isChosen ? 'red' : 'black')};\n`;\n\nconst StyledButton = styled(Button)`\n  left: 10px;\n`;\n\nconst TaskHeader: React.FC<TaskHeaderProps> = ({\n  title,\n  isChosen,\n  isCompleted,\n  toggleComplete,\n  onChoose,\n  onOpenEditModal,\n  onEnableMap,\n  checkBoxTestId,\n}) => (\n  <div>\n    <Checkbox data-testid={checkBoxTestId} checked={isCompleted} onChange={toggleComplete} />\n    <StyledLabel isChosen={isChosen} onClick={onChoose}>\n      {title}\n    </StyledLabel>\n    <StyledEditIcon onClick={onOpenEditModal} role={`edit-icon-${title}`} />\n    <StyledButton type=\"primary\" onClick={onEnableMap}>\n      Pick place\n    </StyledButton>\n  </div>\n);\n\nexport default memo(TaskHeader);\n","import React, { memo, forwardRef, ForwardRefRenderFunction } from 'react';\nimport { RefInputType } from 'types';\n\nconst UncontrolledInput: ForwardRefRenderFunction<RefInputType> = ({ ...props }, inputRef) => (\n  <input className=\"ant-input\" ref={inputRef as RefInputType} {...props} />\n);\n\nconst WrappedInput = forwardRef<RefInputType>(UncontrolledInput);\n\nexport default memo(WrappedInput);\n","import React, { memo, forwardRef, ForwardRefRenderFunction } from 'react';\nimport styled from 'styled-components';\nimport { RefTextAreaType } from 'types';\n\nconst StyledTextArea = styled.textarea`\n  height: 150px !important;\n`;\n\nconst UncontrolledTextArea: ForwardRefRenderFunction<RefTextAreaType> = (\n  { ...props },\n  inputRef,\n) => <StyledTextArea className=\"ant-input\" ref={inputRef as RefTextAreaType} {...props} />;\n\nconst WrappedTextArea = forwardRef<RefTextAreaType>(UncontrolledTextArea);\n\nexport default memo(WrappedTextArea);\n","import React, { ReactElement } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { Typography } from 'antd';\nimport {\n  ControlledFieldComponentProps,\n  ControlledFormFieldProps,\n  UncontrolledFormFieldProps,\n} from './FormField.props';\n\nconst { Text } = Typography;\n\nexport const ControlledFormField = <\n  T extends ControlledFieldComponentProps,\n  R extends ControlledFormFieldProps<T>,\n>({\n  rules,\n  as: Component,\n  fieldName,\n  valuePropName = 'value',\n  ...props\n}: R): ReactElement => {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      control={control}\n      name={fieldName}\n      rules={rules}\n      render={({ field: { onChange, value }, fieldState: { error } }) => (\n        <>\n          <Component onChange={onChange} {...{ [valuePropName]: value, ...props }} />\n          {error && <Text type=\"danger\">{error.message}</Text>}\n        </>\n      )}\n    />\n  );\n};\n\nexport const UncontrolledFormField: React.FC<UncontrolledFormFieldProps> = ({\n  rules,\n  as: Component,\n  fieldName,\n  ...props\n}) => {\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <>\n      <Component {...register(fieldName, rules)} {...props} />\n      {errors[fieldName] && <Text type=\"danger\">{errors[fieldName].message}</Text>}\n    </>\n  );\n};\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport {\n  WrapperProps,\n  FormItemProps,\n  ExtendedWrapperProps,\n  JUSTIFY_CONTENT_TYPES,\n  DIRECTION,\n} from './FormItem.props';\n\nconst LabelWrapper = styled.div`\n  flex: 0.3;\n  display: flex;\n  padding-right: 20px;\n  & > label {\n    text-align: end;\n    font-weight: bold;\n  }\n`;\n\nconst Wrapper = styled.div.attrs<WrapperProps>(({ flexDirection }) => ({\n  justifyContent:\n    flexDirection === DIRECTION.COLUMN\n      ? JUSTIFY_CONTENT_TYPES.FLEX_START\n      : JUSTIFY_CONTENT_TYPES.FLEX_END,\n  flexDirection,\n}))<ExtendedWrapperProps>`\n  display: flex;\n  padding: 10px 0;\n  flex-direction: ${({ flexDirection }) => flexDirection};\n  & > ${LabelWrapper} {\n    justify-content: ${({ justifyContent }) => justifyContent};\n  }\n`;\n\nconst FieldWrapper = styled.div`\n  flex: 0.7;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`;\n\nconst FormItem: React.FC<FormItemProps> = ({ labelName, children, htmlFor, flexDirection }) => (\n  <Wrapper flexDirection={flexDirection}>\n    <LabelWrapper>\n      <label htmlFor={htmlFor}>{`${labelName}`}</label>\n    </LabelWrapper>\n    <FieldWrapper>{children}</FieldWrapper>\n  </Wrapper>\n);\n\nexport default memo(FormItem);\n","import { FieldErrors } from 'react-hook-form';\nimport FORM_FIELDS from 'constants/field-names';\n\nexport enum NAME_TYPE {\n  TASK_TITLE = FORM_FIELDS.TASK_TITLE,\n  CATEGORY_TITLE = FORM_FIELDS.CATEGORY_TITLE,\n}\n\nexport type SendDataType = {\n  [key in NAME_TYPE]: string;\n};\n\ntype ErrorType = FieldErrors<SendDataType>;\n\ntype CommonProps = {\n  name: NAME_TYPE;\n  placeholder: string;\n  addButtonName: string;\n};\n\nexport type AddFormProps = CommonProps & {\n  onSubmit: () => void;\n  errors: ErrorType;\n  onBlurForm: () => void;\n};\n\nexport type AddFormContainerProps = CommonProps & {\n  onAddItem: (data: SendDataType) => void;\n  validateOnMatch: (title: string) => Promise<boolean>;\n};\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\nimport { Checkbox, Input } from 'antd';\nimport { TasksFilterProps } from './TaskFilters.props';\n\nconst Wrapper = styled.div`\n  margin-top: 40px;\n  display: flex;\n  justify-content: center;\n  position: sticky;\n  top: 75px;\n`;\n\nconst TasksFilters: React.FC<TasksFilterProps> = ({\n  showDone,\n  searchKey,\n  onSwitchDone,\n  onChangeSearch,\n}) => (\n  <Wrapper>\n    <Checkbox defaultChecked={showDone} onChange={onSwitchDone}>\n      Show done\n    </Checkbox>\n    <Input\n      placeholder=\"search\"\n      style={{ width: 200 }}\n      defaultValue={searchKey}\n      onChange={onChangeSearch}\n    />\n  </Wrapper>\n);\n\nexport default memo(TasksFilters);\n","import React, { memo } from 'react';\nimport { Card, Collapse } from 'antd';\nimport styled from 'styled-components';\nimport { TaskHeader } from 'components';\nimport { TaskProps } from './Task.props';\nimport 'antd/dist/antd.css';\n\nconst { Panel } = Collapse;\n\nconst StyledCard = styled(Card)`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  border-radius: 10px !important;\n  opacity: 0.3;\n\n  &:hover {\n    opacity: 0.6;\n  }\n`;\n\nconst Task: React.FC<TaskProps> = ({ description, id, ...props }) => (\n  <StyledCard title={<TaskHeader {...props} />}>\n    <Collapse bordered={false}>\n      <Panel key={id} header=\"Card content\">\n        <p>{description}</p>\n      </Panel>\n    </Collapse>\n  </StyledCard>\n);\n\nexport default memo(Task);\n","import React, { ReactElement } from 'react';\nimport 'antd/dist/antd.css';\nimport { Tree as AntTree } from 'antd';\nimport styled from 'styled-components';\nimport { TreeNodeProps, NodeInfoType, TreeNodeTitleProps, TreeProps } from './tree.props';\n\nconst { TreeNode } = AntTree;\n\nexport const StyledTreeNode = styled(TreeNode)``;\n\nconst StyledTree = styled(AntTree)`\n  margin-top: 20px !important;\n  width: 90%;\n  align-self: center;\n  max-height: 85%;\n  overflow: auto;\n`;\n\nconst generateTree = (TreeNodeTitle: React.FC<TreeNodeTitleProps>): React.FC<TreeProps> => {\n  const getTreeNode = (\n    nodeInfo: NodeInfoType,\n    getChildNodes?: (arg: NodeInfoType[]) => ReactElement<TreeNodeProps, typeof StyledTreeNode>[],\n  ) => (\n    <StyledTreeNode\n      key={nodeInfo.id}\n      title={<TreeNodeTitle id={nodeInfo.id} path={nodeInfo.path} title={nodeInfo.title} />}\n    >\n      {getChildNodes && getChildNodes(nodeInfo.children)}\n    </StyledTreeNode>\n  );\n\n  const getTreeNodes = (nodesInfo: NodeInfoType[]) =>\n    nodesInfo.map((nodeInfo) => {\n      if (nodeInfo.children.length) {\n        return getTreeNode(nodeInfo, getTreeNodes);\n      }\n      return getTreeNode(nodeInfo);\n    });\n\n  const Tree: React.FC<TreeProps> = ({\n    onSelectNode,\n    nodesInfo,\n    selectedKeys,\n    expandedKeys,\n    ...props\n  }) => (\n    <StyledTree\n      draggable\n      onSelect={onSelectNode}\n      defaultExpandedKeys={expandedKeys}\n      {...(selectedKeys && { selectedKeys })}\n      {...props}\n    >\n      {getTreeNodes(nodesInfo)}\n    </StyledTree>\n  );\n\n  return Tree;\n};\n\nexport default generateTree;\n","import React, { memo, useMemo } from 'react';\nimport styled from 'styled-components';\nimport generateTree from 'HOCs';\nimport { CategoryItemProps, CategoryTreeProps } from './CategoriesTree.props';\n\nconst StyledText = styled.p`\n  line-height: 15px;\n`;\n\nconst CategoryItem: React.FC<CategoryItemProps> = ({ title }) => <StyledText>{title}</StyledText>;\n\nconst Categories = generateTree(CategoryItem);\n\nconst CategoriesTree: React.FC<CategoryTreeProps> = ({ onChange, value, nodesInfo }) => {\n  const expandedKeys = useMemo(\n    () =>\n      value.length\n        ? value[0].split('-').reduce((acc: string[], current, index, arr) => {\n            if (index === 0) {\n              return acc.concat(current);\n            }\n            if (index > 0 && index < arr.length - 1) {\n              return acc.concat(`${acc[index - 1]}-${current}`);\n            }\n            return acc;\n          }, [])\n        : [],\n    [value],\n  );\n\n  return (\n    <Categories\n      onSelectNode={onChange}\n      selectedKeys={value}\n      nodesInfo={nodesInfo}\n      expandedKeys={expandedKeys}\n    />\n  );\n};\n\nexport default memo(CategoriesTree);\n","import React, { memo } from 'react';\nimport { Checkbox } from 'antd';\nimport { TaskCompletedProps } from './TaskCompleted.props';\n\nconst TaskCompleted: React.FC<TaskCompletedProps> = ({ onChange, checked, id }) => (\n  <Checkbox onChange={onChange} checked={checked} id={id} />\n);\n\nexport default memo(TaskCompleted);\n","const FIELD_IDS = {\n  TITLE: 'task-title',\n  IS_COMPLETED: 'task-completed',\n  DESCRIPTION: 'task-description',\n};\n\nexport default FIELD_IDS;\n","import React, { memo, NamedExoticComponent, useCallback } from 'react';\nimport 'antd/dist/antd.css';\nimport { Row, Col, Modal } from 'antd';\nimport FORM_FIELDS from 'constants/field-names';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport {\n  UncontrolledInput,\n  UncontrolledTextArea,\n  ControlledFormField,\n  UncontrolledFormField,\n  FormItem,\n  DIRECTION,\n} from 'components';\n\nimport { CategoriesTree, TaskCompleted } from './components';\nimport { TaskFormProps, FieldValues } from './TaskForm.props';\nimport FIELD_IDS from './constants';\n\nexport const defaultSaveButtonTitle = 'Save';\nexport const defaultCancelButtonTitle = 'Cancel';\nexport const labelNames = {\n  [FORM_FIELDS.TASK_PLACEMENT]: 'Task placement:',\n  [FORM_FIELDS.TASK_TITLE]: 'Task title:',\n  [FORM_FIELDS.TASK_FINISHED]: 'Completed:',\n  [FORM_FIELDS.TASK_DESCRIPTION]: 'Task description:',\n};\nexport const errorMessages = {\n  [FORM_FIELDS.TASK_TITLE]: 'Task title can`t be empty',\n  [FORM_FIELDS.TASK_DESCRIPTION]: 'Task description can`t be empty',\n};\n\nconst TaskForm: React.FC<TaskFormProps> = ({\n  nodesInfo,\n  defaultValues,\n  visible,\n  onClose,\n  sendData,\n  saveButtonTitle = defaultSaveButtonTitle,\n  cancelButtonTitle = defaultCancelButtonTitle,\n  validateOnMatch,\n}) => {\n  const { handleSubmit, setError, ...methods } = useForm({ defaultValues });\n\n  const sendDataHandler = useCallback(\n    async (values: FieldValues) => {\n      const isError = await validateOnMatch(\n        values[FORM_FIELDS.TASK_TITLE],\n        values[FORM_FIELDS.TASK_PLACEMENT],\n      );\n      if (isError) {\n        setError(FORM_FIELDS.TASK_TITLE, {\n          type: 'notMatch',\n          message: 'An item with such name exists',\n        });\n      } else {\n        sendData(values);\n      }\n    },\n    [sendData, setError, validateOnMatch],\n  );\n\n  return (\n    <FormProvider {...{ handleSubmit, setError, ...methods }}>\n      <Modal\n        title=\"Edit task\"\n        visible={visible}\n        onCancel={onClose}\n        onOk={handleSubmit(sendDataHandler)}\n        okText={saveButtonTitle}\n        cancelButtonProps={{ children: cancelButtonTitle }}\n      >\n        <Row>\n          <Col span={9}>\n            <FormItem\n              flexDirection={DIRECTION.COLUMN}\n              labelName={labelNames[FORM_FIELDS.TASK_PLACEMENT]}\n            >\n              <ControlledFormField\n                as={CategoriesTree as NamedExoticComponent}\n                fieldName={FORM_FIELDS.TASK_PLACEMENT}\n                nodesInfo={nodesInfo}\n              />\n            </FormItem>\n          </Col>\n          <Col span={15}>\n            <Row>\n              <FormItem\n                flexDirection={DIRECTION.ROW}\n                htmlFor={FIELD_IDS.TITLE}\n                labelName={labelNames[FORM_FIELDS.TASK_TITLE]}\n              >\n                <UncontrolledFormField\n                  rules={{ required: errorMessages[FORM_FIELDS.TASK_TITLE] }}\n                  as={UncontrolledInput}\n                  fieldName={FORM_FIELDS.TASK_TITLE}\n                  id={FIELD_IDS.TITLE}\n                />\n              </FormItem>\n            </Row>\n            <Row>\n              <FormItem\n                flexDirection={DIRECTION.ROW}\n                labelName={labelNames[FORM_FIELDS.TASK_FINISHED]}\n                htmlFor={FIELD_IDS.IS_COMPLETED}\n              >\n                <ControlledFormField\n                  as={TaskCompleted as NamedExoticComponent}\n                  fieldName={FORM_FIELDS.TASK_FINISHED}\n                  valuePropName=\"checked\"\n                  id={FIELD_IDS.IS_COMPLETED}\n                />\n              </FormItem>\n            </Row>\n            <Row>\n              <FormItem\n                flexDirection={DIRECTION.ROW}\n                labelName={labelNames[FORM_FIELDS.TASK_DESCRIPTION]}\n                htmlFor={FIELD_IDS.DESCRIPTION}\n              >\n                <UncontrolledFormField\n                  rules={{ required: errorMessages[FORM_FIELDS.TASK_DESCRIPTION] }}\n                  as={UncontrolledTextArea}\n                  fieldName={FORM_FIELDS.TASK_DESCRIPTION}\n                  id={FIELD_IDS.DESCRIPTION}\n                />\n              </FormItem>\n            </Row>\n          </Col>\n        </Row>\n      </Modal>\n    </FormProvider>\n  );\n};\n\nexport default memo(TaskForm);\n","import React, { memo } from 'react';\nimport 'antd/dist/antd.css';\nimport { Button, Icon } from 'antd';\nimport { UndoRedoButtonsProps } from './UndoRedoButtons.props';\n\nconst UndoRedoButtons: React.FC<UndoRedoButtonsProps> = ({\n  onRedo,\n  onUndo,\n  isReDoDisabled,\n  isUnDoDisabled,\n}) => (\n  <Button.Group size=\"small\">\n    <Button type=\"primary\" disabled={isUnDoDisabled} onClick={onUndo}>\n      <Icon type=\"left\" />\n      Backward\n    </Button>\n    <Button type=\"primary\" disabled={isReDoDisabled} onClick={onRedo}>\n      Forward\n      <Icon type=\"right\" />\n    </Button>\n  </Button.Group>\n);\n\nexport default memo(UndoRedoButtons);\n","import React, { memo } from 'react';\nimport 'antd/dist/antd.css';\nimport { Progress } from 'antd';\nimport styled from 'styled-components';\nimport UndoRedoButtons from '../UndoRedoButtons';\nimport { HeaderProps } from './Header.props';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst StyledHeader = styled.h1`\n  color: white;\n  padding: 0px;\n  line-height: 28px;\n  margin-top: 3vh;\n  margin-bottom: 0px;\n`;\n\nconst StyledPropgressBar = styled(Progress)`\n  position: static !important;\n  display: block !important;\n  margin-top: 1vh !important;\n`;\n\nconst Header: React.FC<HeaderProps> = ({\n  percentage,\n  onRedo,\n  onUndo,\n  isReDoDisabled,\n  isUnDoDisabled,\n}) => (\n  <div>\n    <Wrapper>\n      <StyledHeader>Task Accountant</StyledHeader>\n      <UndoRedoButtons\n        onRedo={onRedo}\n        onUndo={onUndo}\n        isReDoDisabled={isReDoDisabled}\n        isUnDoDisabled={isUnDoDisabled}\n      />\n    </Wrapper>\n    <StyledPropgressBar percent={percentage} strokeColor=\"red\" showInfo={false} />\n  </div>\n);\n\nexport default memo(Header);\n","import React, { memo, useCallback, useRef } from 'react';\nimport { Modal } from 'antd';\nimport { CategoryForm, SendDataType } from 'components';\nimport FORM_FIELDS from 'constants/field-names';\nimport { EditCategoriesDialogProps } from './EditCategoriesDialog.props';\n\nconst EditCategoriesDialog: React.FC<EditCategoriesDialogProps> = ({\n  visible,\n  onToggle,\n  sendData,\n  defaultValues,\n  children,\n  operationTitle,\n  validateOnMatch,\n  resetAfterSubmit,\n  resetAfterCancel,\n  formId,\n  footerSubmitButton,\n}) => {\n  const refToCancelSubmitHandler = useRef<() => void>(() => {});\n\n  const handleSendData = useCallback(\n    ({ [FORM_FIELDS.CATEGORY_TITLE]: title }: SendDataType) => {\n      onToggle();\n      sendData({ title });\n    },\n    [onToggle, sendData],\n  );\n\n  const handleCancel = useCallback(() => {\n    onToggle();\n    if (resetAfterCancel) {\n      refToCancelSubmitHandler.current();\n    }\n  }, [onToggle, resetAfterCancel]);\n\n  return (\n    <Modal\n      visible={visible}\n      title={operationTitle}\n      onCancel={handleCancel}\n      footer={footerSubmitButton || []}\n    >\n      <CategoryForm\n        key={JSON.stringify(defaultValues)}\n        sendData={handleSendData}\n        defaultValues={defaultValues}\n        resetAfterSubmit={resetAfterSubmit}\n        validateOnMatch={validateOnMatch}\n        refToCancelSubmit={refToCancelSubmitHandler}\n        formId={formId}\n      >\n        {children}\n      </CategoryForm>\n    </Modal>\n  );\n};\n\nexport default memo(EditCategoriesDialog);\n","import React, { memo } from 'react';\nimport { Map, TileLayer, Marker } from 'react-leaflet';\nimport styled from 'styled-components';\nimport { WorldMapProps, WrapperProps } from './WorldMap.props';\n\nconst accessToken =\n  'pk.eyJ1Ijoic2FuZGVyYXMiLCJhIjoiY2s0bGJ2aW44Mjg5NjNubzJ2NXlvMmk1eiJ9.U4UYcWGp-W0S9CeW5EFcpg';\nconst id = 'mapbox/streets-v11';\n\nconst StyledMapContainer = styled(Map)<WrapperProps>`\n  position: absolute;\n  width: 70%;\n  height: calc(100vh - 15%);\n  overflow: hidden;\n  top: 15%;\n  z-index: 1;\n`;\n\nconst WorldMap: React.FC<WorldMapProps> = ({ coords, onClick }) => (\n  <StyledMapContainer\n    data-testid=\"map\"\n    center={coords || [52.093, 23.695]}\n    zoom={12}\n    onClick={onClick}\n  >\n    <TileLayer\n      url={`https://api.mapbox.com/styles/v1/${id}/tiles/{z}/{x}/{y}?access_token=${accessToken}`}\n      attribution=\"Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a>, Imagery © <a href='https://www.mapbox.com/'>Mapbox</a>\"\n    />\n    {coords && (\n      <div data-testid=\"marker\">\n        <Marker position={coords} />\n      </div>\n    )}\n  </StyledMapContainer>\n);\n\nexport default memo(WorldMap);\n","import React, { memo, forwardRef, ForwardRefRenderFunction } from 'react';\nimport 'antd/dist/antd.css';\nimport { Button as AntButton, Typography } from 'antd';\nimport styled from 'styled-components';\nimport { addFormInputTestId, addFormTestId } from 'constants/test-ids';\n\nimport { RefInputType } from 'types';\nimport { AddFormProps } from './AddForm.props';\n\nconst { Text: AntText } = Typography;\n\nconst Form = styled.form`\n  display: flex;\n  position: sticky;\n  top: 0px;\n`;\n\nconst StyledInput = styled.input`\n  display: block;\n`;\n\nconst Text = styled(AntText)`\n  position: absolute;\n  left: 50px;\n  top: 40px;\n`;\n\nconst AddForm: ForwardRefRenderFunction<RefInputType, AddFormProps> = (\n  { onSubmit, errors, name, onBlurForm, placeholder, addButtonName, ...props },\n  inputRef,\n) => (\n  <Form autoComplete=\"off\" onSubmit={onSubmit} onBlur={onBlurForm} data-testid={addFormTestId}>\n    <StyledInput\n      {...props}\n      name={name as unknown as string}\n      className=\"ant-input\"\n      ref={inputRef as RefInputType}\n      placeholder={placeholder}\n      data-testid={addFormInputTestId}\n    />\n    <AntButton htmlType=\"submit\" type=\"primary\">\n      {addButtonName}\n    </AntButton>\n    {errors[name] && <Text type=\"danger\">{errors[name]?.message}</Text>}\n  </Form>\n);\n\nconst WrappedAddform = forwardRef<RefInputType, AddFormProps>(AddForm);\n\nexport default memo(WrappedAddform);\n","import React, { memo, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport AddForm from './AddForm';\nimport { AddFormContainerProps } from './AddForm.props';\n\nconst AddFormContainer: React.FC<AddFormContainerProps> = ({\n  name,\n  placeholder,\n  onAddItem,\n  validateOnMatch,\n  addButtonName,\n}) => {\n  const {\n    handleSubmit,\n    reset,\n    formState: { errors },\n    setError,\n    register,\n  } = useForm();\n\n  const submit = useCallback(\n    async ({ [name]: title }) => {\n      const isError = await validateOnMatch(title);\n      if (isError) {\n        setError(name as unknown as string, {\n          type: 'notMatch',\n          message: 'An item with such name exists',\n        });\n      } else {\n        onAddItem({ [name]: title });\n        reset({ [name]: '' });\n      }\n    },\n    [name, onAddItem, reset, setError, validateOnMatch],\n  );\n\n  const handleBlurForm = useCallback(() => {\n    setTimeout(() => reset({ [name]: '' }), 500);\n  }, [name, reset]);\n\n  const onSubmit = useMemo(() => handleSubmit(submit), [handleSubmit, submit]);\n\n  return (\n    <AddForm\n      onSubmit={onSubmit}\n      onBlurForm={handleBlurForm}\n      errors={errors}\n      placeholder={placeholder}\n      addButtonName={addButtonName}\n      {...{\n        ...register(name as unknown as string, {\n          required: 'This is required',\n        }),\n        name,\n      }}\n    />\n  );\n};\n\nexport default memo(AddFormContainer);\n","enum SAGA_ACTION_TITLES {\n  START_ADD_CATEGORY_PROCESS = 'START_ADD_CATEGORY_PROCESS',\n  START_ADD_SUB_CATEGORY_PROCESS = 'START_ADD_SUB_CATEGORY_PROCESS',\n  START_DELETE_CATEGORY_PROCESS = 'START_DELETE_CATEGORY_PROCESS',\n  START_EDIT_CATEGORY_PROCESS = 'START_EDIT_CATEGORY_PROCESS',\n  START_EDIT_TASK_STATUS_PROCESS = 'START_EDIT_TASK_STATUS_PROCESS',\n  START_ADD_TASK_PROCESS = 'START_ADD_TASK_PROCESS',\n  START_DELETE_TASK_PROCESS = 'START_DELETE_TASK_PROCESS',\n  START_EDIT_TASK_PROCESS = 'START_EDIT_TASK_PROCESS',\n  START_EDIT_TASK_LOCATION = 'START_EDIT_TASK_LOCATION',\n}\n\nexport enum TASK_RATIO_ACTIONS {\n  CALCULATE_RATIO = 'CALCULATE_RATIO',\n  INCREMENT = 'INCREMENT',\n  DECREMENT = 'DECREMENT',\n  INCREMENT_ALL = 'INCREMENT_ALL',\n  DECREMENT_ALL = 'DECREMENT_ALL',\n}\n\nexport enum TASKS_FILTER_ACTIONS {\n  SHOW_DONE = 'SHOW_DONE',\n  SEARCH_TASK = 'SEARCH_TASK',\n}\n\nexport default SAGA_ACTION_TITLES;\n","import { createAction } from 'redux-actions';\nimport SAGA_ACTION_TITLES, { TASK_RATIO_ACTIONS, TASKS_FILTER_ACTIONS } from './actionTitles';\n\nexport const startAddCategoryProcess = createAction(SAGA_ACTION_TITLES.START_ADD_CATEGORY_PROCESS);\nexport const startAddSubCategoryProcess = createAction(\n  SAGA_ACTION_TITLES.START_ADD_SUB_CATEGORY_PROCESS,\n);\nexport const startDeleteCategoryProcess = createAction(\n  SAGA_ACTION_TITLES.START_DELETE_CATEGORY_PROCESS,\n);\nexport const startEditCategoryProcess = createAction(\n  SAGA_ACTION_TITLES.START_EDIT_CATEGORY_PROCESS,\n);\nexport const startEditTaskStatusProcess = createAction(\n  SAGA_ACTION_TITLES.START_EDIT_TASK_STATUS_PROCESS,\n);\nexport const startAddTaskProcess = createAction(SAGA_ACTION_TITLES.START_ADD_TASK_PROCESS);\nexport const startDeleteTaskProcess = createAction(SAGA_ACTION_TITLES.START_DELETE_TASK_PROCESS);\nexport const startEditTaskProcess = createAction(SAGA_ACTION_TITLES.START_EDIT_TASK_PROCESS);\nexport const startEditTaskLocationProcess = createAction(\n  SAGA_ACTION_TITLES.START_EDIT_TASK_LOCATION,\n);\n\nexport const addCategory = createAction('ADD_CATEGORY');\nexport const addSubCategory = createAction('ADD_SUBCATEGORY');\nexport const deleteCategory = createAction('DELETE_CATEGORY');\nexport const editCategory = createAction('EDIT_CATEGORY');\n\nexport const insertCategory = createAction('INSERT_CATEGORY');\n\nexport const addTask = createAction('ADD_TASK');\nexport const editTaskStatus = createAction('EDIT_TASK_STATUS');\nexport const editTask = createAction('EDIT_TASK');\nexport const deleteTask = createAction('DELETE_TASK');\nexport const editTaskLocation = createAction('EDIT_TASK_LOCATION');\n\nexport const showDoneTasks = createAction(TASKS_FILTER_ACTIONS.SHOW_DONE);\nexport const searchTasks = createAction(TASKS_FILTER_ACTIONS.SEARCH_TASK);\n\nexport const calculateRatio = createAction(TASK_RATIO_ACTIONS.CALCULATE_RATIO);\n\nexport const startUnDoProcess = createAction('START_UNDO_PROCESS');\nexport const startReDoProcess = createAction('START_REDO_PROCESS');\n\nexport const addToUnDo = createAction('ADD_TO_UNDO');\nexport const deleteFromUnDo = createAction('DELETE_FROM_UNDO');\n\nexport const addToReDo = createAction('ADD_TO_REDO');\nexport const deleteFromReDo = createAction('DELETE_FROM_REDO');\n\nexport const clearReDo = createAction('CLEAR_REDO');\n\nexport const switchMapPicker = createAction('SWITCH_DISPLAY');\n","import { StateObject } from 'reducers';\nimport { UnionType } from '../reducers/payload.type';\n\nexport type PathAndId = {\n  path: string;\n  id: string;\n};\n\nexport const getLastCategoryPathAndId = ({ updateCategories }: StateObject): PathAndId => {\n  const lastIndex = updateCategories.get('categories').toArray().length - 1;\n  return {\n    path: `categories-${lastIndex}`,\n    id: updateCategories.getIn(['categories', lastIndex, 'id']),\n  };\n};\n\nexport type PathParamAndId = {\n  pathParam: number;\n  id: string;\n};\n\nexport const getLastSubCategoryPathParamAndId =\n  (path: UnionType[]) =>\n  ({ updateCategories }: StateObject): PathParamAndId => {\n    const lastSubCategoryIndex = updateCategories.getIn(path).toArray().length - 1;\n    return {\n      pathParam: lastSubCategoryIndex,\n      id: updateCategories.getIn([...path, lastSubCategoryIndex, 'id']),\n    };\n  };\n","import { StateObject } from 'reducers';\nimport { Map } from 'immutable';\nimport { Task, Category } from 'reducers/state.type';\nimport { UnionType } from '../reducers/payload.type';\n\nexport const getTask =\n  (path: UnionType[], pathParam?: string) =>\n  ({ updateMappedTasks }: StateObject): Task =>\n    path.length\n      ? (\n          updateMappedTasks.getIn([...path, ...(pathParam ? [pathParam] : [])]) || Map({})\n        ).toObject()\n      : {};\n\nexport const getCategory =\n  (path: UnionType[], pathParam?: number) =>\n  ({ updateCategories }: StateObject): Category =>\n    updateCategories.getIn([...path, pathParam]).toObject();\n","import _ from 'lodash';\nimport { StateObject } from 'reducers';\nimport { OperationConfig, OperationsAmountConfig } from './types';\n\nexport const getUndoOperationConfig = ({ unDo }: StateObject): OperationConfig =>\n  _.get(unDo, `undoOperations[${unDo.undoOperations.length - 1}]`);\n\nexport const getRedoOperationConfig = ({ reDo }: StateObject): OperationConfig =>\n  _.get(reDo, `redoOperations[${reDo.redoOperations.length - 1}]`);\n\nexport const getOperationsAmount = ({ unDo, reDo }: StateObject): OperationsAmountConfig => ({\n  unDoAmount: _.get(unDo, 'undoOperations').length,\n  reDoAmount: _.get(reDo, 'redoOperations').length,\n});\n","import { Map } from 'immutable';\nimport { StateObject } from 'reducers';\nimport { UnionType } from '../reducers/payload.type';\nimport { CategoryImmutableMap } from '../reducers/state.type';\n\nconst getEntitiesTitles = ({ updateCategories }: StateObject, path: UnionType[]) =>\n  updateCategories\n    .getIn(path)\n    .map((entity: CategoryImmutableMap) => entity.get('title'))\n    .toArray();\n\nconst isTheSameNameCategoryExist =\n  (title: string, path: UnionType[]) =>\n  (state: StateObject): boolean =>\n    getEntitiesTitles(state, path).includes(title);\n\nexport const isTheSameNameTaskExist =\n  (title: string, path: string, taskId: string) =>\n  ({ updateMappedTasks }: StateObject): boolean => {\n    return (updateMappedTasks.get(path) || Map({})).reduce(\n      (reduction, value) =>\n        !reduction ? value?.get('title') === title && value?.get('id') !== taskId : true,\n      Boolean(false),\n    );\n  };\n\nexport default isTheSameNameCategoryExist;\n","import { Map } from 'immutable';\nimport { StateObject } from 'reducers';\nimport { NodeInfoType } from 'HOCs';\nimport { Category } from 'reducers/state.type';\n\nconst getSubCategories = (\n  path: string,\n  subCategories: Map<keyof Category, Category[keyof Category]>[],\n) => {\n  return subCategories.length > 0\n    ? subCategories.map((subCategory, num) => {\n        const {\n          id,\n          title,\n          subCategories: childrenCategories,\n        }: Category = subCategory.toObject() as Category;\n\n        const jsonSubCategory: NodeInfoType = {\n          path: `${path}-subCategories-${num}`,\n          id,\n          title,\n          children:\n            childrenCategories.toArray().length > 0\n              ? getSubCategories(`${path}-subCategories-${num}`, childrenCategories.toArray())\n              : [],\n        };\n\n        return jsonSubCategory;\n      })\n    : [];\n};\n\nconst getCategories = ({ updateCategories }: StateObject): NodeInfoType[] => {\n  return updateCategories\n    .get('categories')\n    .toArray()\n    .map((category, num) => {\n      const {\n        id,\n        title,\n        subCategories: childrenCategories,\n      }: Category = category.toObject() as Category;\n\n      const jsonCategory: NodeInfoType = {\n        path: `categories-${num}`,\n        id,\n        title,\n        children: getSubCategories(`categories-${num}`, childrenCategories.toArray()),\n      };\n\n      return jsonCategory;\n    });\n};\n\nexport default getCategories;\n","import { Map } from 'immutable';\nimport { StateObject } from 'reducers';\nimport { UnionType } from 'reducers/payload.type';\nimport { JsonTaskType, TaskImmutableMap, Task, TasksFilterState } from 'reducers/state.type';\n\nconst getCompletedTasksRatio = ({ calculateTaskRatio: { done, all } }: StateObject): number =>\n  all ? (done / all) * 100 : 0;\n\nexport const getChosenTaskUrl = ({ switchMapPicker: { url } }: StateObject): UnionType[] => url;\n\nexport const getVisibilityOfTasks = ({ switchMapPicker: { isDisplayed } }: StateObject): boolean =>\n  !!isDisplayed;\n\nexport const getTasksByCategoryId =\n  (categoryId: string) =>\n  ({ updateMappedTasks }: StateObject): JsonTaskType[] =>\n    Object.values((updateMappedTasks.get(categoryId) || Map({})).toObject()).map(\n      (taskMap: TaskImmutableMap) => {\n        const task: Task = taskMap.toObject() as Task;\n        return { ...task, location: task.location.toObject() };\n      },\n    );\n\nexport const getTasksFilters = ({\n  filterTasks: { showDone, searchKey },\n}: StateObject): TasksFilterState => ({\n  showDone,\n  searchKey,\n});\n\nexport default getCompletedTasksRatio;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { addCategory, deleteCategory, addToUnDo, clearReDo, SAGA_ACTION_TITLES } from 'actions';\nimport { getLastCategoryPathAndId, PathAndId } from 'selectors';\nimport { UpdateCategoriesSagaArgumentType, UpdateTasksGenerator } from './saga.types';\n\nexport function* addCategorySaga({\n  payload: { title },\n}: UpdateCategoriesSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n\n  yield put(addCategory({ title }));\n  const { path, id } = (yield select(getLastCategoryPathAndId)) as PathAndId;\n  yield put(\n    addToUnDo({\n      undoOperation: deleteCategory,\n      redoOperation: addCategory,\n      obj: {\n        id,\n        path: [(path as string).split('-')[0]],\n        pathParam: (path as string).split('-')[1],\n        title,\n        subCategories: [],\n      },\n    }),\n  );\n}\n\nfunction* addCategoryWatcher(): Generator<ForkEffect> {\n  yield takeEvery(SAGA_ACTION_TITLES.START_ADD_CATEGORY_PROCESS, addCategorySaga);\n}\n\nexport default addCategoryWatcher;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { getLastSubCategoryPathParamAndId, PathParamAndId } from 'selectors';\nimport { addSubCategory, deleteCategory, addToUnDo, clearReDo } from 'actions';\nimport { UpdateCategoriesSagaArgumentType, UpdateTasksGenerator } from './saga.types';\n\nexport function* addSubCategorySaga({\n  payload: { path, title },\n}: UpdateCategoriesSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n  yield put(addSubCategory({ path, title }));\n  const { pathParam, id } = (yield select(\n    getLastSubCategoryPathParamAndId(path),\n  )) as PathParamAndId;\n  yield put(\n    addToUnDo({\n      undoOperation: deleteCategory,\n      redoOperation: addSubCategory,\n      obj: {\n        id,\n        path,\n        pathParam,\n        title,\n        subCategories: [],\n      },\n    }),\n  );\n}\n\nfunction* addSubCategoryWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_ADD_SUB_CATEGORY_PROCESS', addSubCategorySaga);\n}\n\nexport default addSubCategoryWatcher;\n","import { takeEvery, put, ForkEffect, call } from 'redux-saga/effects';\nimport uniqid from 'uniqid';\nimport { addTask, deleteTask, addToUnDo, clearReDo } from 'actions';\nimport { UpdateTasksGenerator, UpdateTasksSagaArgumentType } from './saga.types';\n\nexport function* addTaskSaga({\n  payload: { path, title },\n}: UpdateTasksSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n\n  const id = yield call(uniqid);\n  yield put(addTask({ id, path, title }));\n  yield put(\n    addToUnDo({\n      undoOperation: deleteTask,\n      redoOperation: addTask,\n      obj: {\n        id,\n        path,\n        pathParam: id,\n        title,\n      },\n    }),\n  );\n}\n\nfunction* addTaskWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_ADD_TASK_PROCESS', addTaskSaga);\n}\n\nexport default addTaskWatcher;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { deleteCategory, addToUnDo, insertCategory, clearReDo } from 'actions';\nimport { getCategory } from 'selectors';\nimport { Category } from 'reducers/state.type';\nimport { UpdateCategoriesSagaArgumentType, UpdateTasksGenerator } from './saga.types';\n\nexport function* deleteCategorySaga({\n  payload: { path, pathParam },\n}: UpdateCategoriesSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n  const category = yield select(getCategory(path, pathParam));\n  yield put(deleteCategory({ path, pathParam }));\n  yield put(\n    addToUnDo({\n      undoOperation: insertCategory,\n      redoOperation: deleteCategory,\n      obj: { ...(category as Category), path, pathParam },\n    }),\n  );\n}\n\nfunction* deleteCategoryWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_DELETE_CATEGORY_PROCESS', deleteCategorySaga);\n}\n\nexport default deleteCategoryWatcher;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { addTask, deleteTask, addToUnDo } from 'actions';\nimport { getTask } from 'selectors';\nimport { Task } from 'reducers/state.type';\nimport { UpdateTasksGenerator, UpdateTasksSagaArgumentType } from './saga.types';\n\nexport function* deleteTaskSaga({\n  payload: { path, pathParam },\n}: UpdateTasksSagaArgumentType): UpdateTasksGenerator {\n  const task = yield select(getTask(path, pathParam as string));\n  yield put(deleteTask({ path, pathParam }));\n  yield put(\n    addToUnDo({\n      undoOperation: addTask,\n      redoOperation: deleteTask,\n      obj: {\n        id: (task as Task).id,\n        title: (task as Task).title,\n        pathParam,\n        path,\n        location: (task as Task).location,\n      },\n    }),\n  );\n}\n\nfunction* deleteTaskWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_DELETE_TASK_PROCESS', deleteTaskSaga);\n}\n\nexport default deleteTaskWatcher;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { editCategory, addToUnDo, clearReDo } from 'actions';\nimport { getCategory } from 'selectors';\nimport { Category } from 'reducers/state.type';\nimport { UpdateTasksGenerator, UpdateCategoriesSagaArgumentType } from './saga.types';\n\nexport function* editCategorySaga({\n  payload: { path, pathParam, title },\n}: UpdateCategoriesSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n  const category = yield select(getCategory(path, pathParam));\n  yield put(editCategory({ path, pathParam, title }));\n  yield put(\n    addToUnDo({\n      undoOperation: editCategory.bind(null, {\n        path,\n        pathParam,\n        title: (category as Category).title,\n      }),\n      redoOperation: editCategory.bind(null, { path, pathParam, title }),\n      obj: {},\n    }),\n  );\n}\n\nfunction* editCategoryWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_EDIT_CATEGORY_PROCESS', editCategorySaga);\n}\n\nexport default editCategoryWatcher;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { editTask, addToUnDo, clearReDo } from 'actions';\nimport { getTask } from 'selectors';\nimport { Task } from 'reducers/state.type';\nimport { UpdateTasksGenerator, UpdateTasksSagaArgumentType } from './saga.types';\n\nexport function* editTaskSaga({\n  payload: { path, newPath, title, description, isCompleted },\n}: UpdateTasksSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n  const task = yield select(getTask(path));\n  yield put(\n    editTask({\n      path,\n      newPath,\n      title,\n      description,\n      isCompleted,\n    }),\n  );\n  yield put(\n    addToUnDo({\n      undoOperation: editTask.bind(null, {\n        path: newPath,\n        newPath: path,\n        title: (task as Task).title,\n        description: (task as Task).description,\n        isCompleted: (task as Task).isCompleted,\n      }),\n      redoOperation: editTask.bind(null, {\n        path,\n        newPath,\n        title,\n        description,\n        isCompleted,\n      }),\n      obj: {},\n    }),\n  );\n}\n\nfunction* editTaskWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_EDIT_TASK_PROCESS', editTaskSaga);\n}\n\nexport default editTaskWatcher;\n","import { takeEvery, put, ForkEffect } from 'redux-saga/effects';\nimport { editTaskStatus, addToUnDo, clearReDo } from 'actions';\nimport { UpdateTasksGenerator, UpdateTasksSagaArgumentType } from './saga.types';\n\nexport function* editTaskStatusSaga({\n  payload: { path, pathParam, isCompleted },\n}: UpdateTasksSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n  yield put(editTaskStatus({ path, pathParam, isCompleted }));\n  yield put(\n    addToUnDo({\n      undoOperation: editTaskStatus.bind(null, { path, pathParam, isCompleted: !isCompleted }),\n      redoOperation: editTaskStatus.bind(null, { path, pathParam, isCompleted }),\n      obj: {},\n    }),\n  );\n}\n\nfunction* editTaskStatusWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_EDIT_TASK_STATUS_PROCESS', editTaskStatusSaga);\n}\n\nexport default editTaskStatusWatcher;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { deleteFromReDo, addToUnDo } from 'actions';\nimport { getRedoOperationConfig } from 'selectors';\nimport { OperationConfig } from 'selectors/types';\nimport { OperationGenerator } from './saga.types';\n\nexport function* redoOperationSaga(): OperationGenerator {\n  const { undoOperation, redoOperation, obj } = (yield select(\n    getRedoOperationConfig,\n  )) as OperationConfig;\n  yield put(redoOperation(obj));\n  yield put(addToUnDo({ undoOperation, redoOperation, obj }));\n  yield put(deleteFromReDo());\n}\n\nfunction* redoOperationWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_REDO_PROCESS', redoOperationSaga);\n}\n\nexport default redoOperationWatcher;\n","import createSagaMiddleware, { Saga } from 'redux-saga';\n\nexport const sagaMiddleware = createSagaMiddleware();\n\nconst execute = <T extends Saga>(saga: T, ...args: Parameters<T>): Promise<any> =>\n  sagaMiddleware.run(saga, ...args).toPromise();\n\nexport default execute;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { deleteFromUnDo, addToReDo } from 'actions';\nimport { getUndoOperationConfig } from 'selectors';\nimport { OperationConfig } from 'selectors/types';\nimport { OperationGenerator } from './saga.types';\n\nexport function* undoOperationSaga(): OperationGenerator {\n  const { undoOperation, redoOperation, obj } = (yield select(\n    getUndoOperationConfig,\n  )) as OperationConfig;\n  yield put(undoOperation(obj));\n  yield put(addToReDo({ undoOperation, redoOperation, obj }));\n  yield put(deleteFromUnDo());\n}\n\nfunction* undoOperationWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_UNDO_PROCESS', undoOperationSaga);\n}\n\nexport default undoOperationWatcher;\n","import { select, SelectEffect } from 'redux-saga/effects';\nimport { isTheSameNameTaskExist, isTheSameNameCategoryExist } from 'selectors';\nimport { TaskValidateSagaArgumentType, CategoryValidationArgumentType } from './saga.types';\n\nfunction* categoryValidationSaga({\n  payload: { path, title },\n}: CategoryValidationArgumentType): Generator<SelectEffect> {\n  return yield select(isTheSameNameCategoryExist(title, path));\n}\n\nexport function* taskValidationSaga({\n  payload: { path, title, taskId },\n}: TaskValidateSagaArgumentType): Generator<SelectEffect> {\n  return yield select(isTheSameNameTaskExist(title, path, taskId));\n}\n\nexport default categoryValidationSaga;\n","import { takeEvery, put, select, ForkEffect } from 'redux-saga/effects';\nimport { editTaskLocation, addToUnDo, switchMapPicker, clearReDo } from 'actions';\nimport { getTask } from 'selectors';\nimport { Task } from 'reducers/state.type';\nimport { UpdateTasksGenerator, UpdateTasksSagaArgumentType } from './saga.types';\n\nexport function* editTaskLocationSaga({\n  payload: { path, location },\n}: UpdateTasksSagaArgumentType): UpdateTasksGenerator {\n  yield put(clearReDo());\n  const task = yield select(getTask(path));\n  yield put(editTaskLocation({ path, location }));\n  yield put(switchMapPicker({ isDisplayed: true, path: [] }));\n  yield put(\n    addToUnDo({\n      undoOperation: editTaskLocation.bind(null, {\n        path,\n        location: (task as Task).location.toObject(),\n      }),\n      redoOperation: editTaskLocation.bind(null, { path, location }),\n      obj: {},\n    }),\n  );\n}\n\nfunction* editTaskLocationWatcher(): Generator<ForkEffect> {\n  yield takeEvery('START_EDIT_TASK_LOCATION', editTaskLocationSaga);\n}\n\nexport default editTaskLocationWatcher;\n","export enum OPERATION_TYPE {\n  ADD,\n  EDIT,\n  DELETE,\n}\n\nexport type EdittedCategoryData = {\n  path: string;\n  title: string;\n  operationType: OPERATION_TYPE;\n};\n\nexport type EditCategoryContextType = {\n  onSetCategoryData: (data: EdittedCategoryData) => void;\n};\n\nexport type PathConfig = {\n  savingPath: (number | string)[];\n  param: number | string;\n};\n","import { PathConfig } from 'types';\n\nexport const getPathParam = (path: string): PathConfig => ({\n  savingPath: path.split('-'),\n  param: path.split('-')[path.split('-').length - 1],\n});\n\nexport const getSavingPath = (path: string): (string | number)[] => {\n  const { savingPath } = getPathParam(path);\n  savingPath.pop();\n  return savingPath;\n};\n","import React, { memo, createContext, useState, useCallback, ReactElement } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button } from 'antd';\nimport { EditCategoriesDialog } from 'patterns';\nimport FORM_FIELDS from 'constants/field-names';\nimport { SendDataType } from 'components';\nimport {\n  startAddSubCategoryProcess,\n  startDeleteCategoryProcess,\n  startEditCategoryProcess,\n} from 'actions';\nimport { sagaExecutor, categoryValidationSaga } from 'sagas';\nimport { getPathParam, getSavingPath } from 'utils';\nimport {\n  EdittedCategoryData,\n  OPERATION_TYPE,\n  EditCategoryContextType,\n} from './EditCategoryContext.props';\n\nexport const EditCategoryContext = createContext<EditCategoryContextType>({\n  onSetCategoryData: () => {},\n});\n\nconst OPERATION_TITLES = {\n  [OPERATION_TYPE.ADD]: 'Add new subcategory',\n  [OPERATION_TYPE.EDIT]: 'Edit category',\n  [OPERATION_TYPE.DELETE]: 'Delete category',\n};\n\nconst RESET_AFTER_SUBMIT_VALUES = {\n  [OPERATION_TYPE.ADD]: true,\n  [OPERATION_TYPE.EDIT]: false,\n  [OPERATION_TYPE.DELETE]: false,\n};\n\nconst EditCategoryProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\n  const [{ path, title, operationType }, setCategoryData] = useState<EdittedCategoryData>({\n    path: '',\n    title: '',\n    operationType: OPERATION_TYPE.ADD,\n  });\n\n  const [visible, setVisible] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  const handleClose = useCallback(() => setVisible(false), []);\n\n  const handleSetCategoryData = useCallback(\n    ({ title: categoryTitle, operationType: type, ...other }: EdittedCategoryData) => {\n      setCategoryData({\n        title: type === OPERATION_TYPE.ADD ? '' : categoryTitle,\n        operationType: type,\n        ...other,\n      });\n      setVisible(true);\n    },\n    [],\n  );\n\n  const handleSendData = useCallback(\n    ({ [FORM_FIELDS.CATEGORY_TITLE]: categoryTitle }: SendDataType) => {\n      switch (operationType) {\n        case OPERATION_TYPE.ADD:\n          dispatch(\n            startAddSubCategoryProcess({\n              path: `${path}-subCategories`.split('-'),\n              title: categoryTitle,\n            }),\n          );\n          break;\n\n        case OPERATION_TYPE.EDIT:\n          dispatch(\n            startEditCategoryProcess({\n              path: getSavingPath(path),\n              pathParam: getPathParam(path).param,\n              title: categoryTitle,\n            }),\n          );\n          break;\n\n        case OPERATION_TYPE.DELETE:\n          dispatch(\n            startDeleteCategoryProcess({\n              path: getSavingPath(path),\n              pathParam: getPathParam(path).param,\n            }),\n          );\n          break;\n\n        default:\n          break;\n      }\n    },\n    [dispatch, operationType, path],\n  );\n\n  const validateOnMatch = useCallback(\n    (entityTitle: string): Promise<boolean> =>\n      operationType === OPERATION_TYPE.ADD || operationType === OPERATION_TYPE.EDIT\n        ? sagaExecutor(categoryValidationSaga, {\n            payload: {\n              path:\n                operationType === OPERATION_TYPE.ADD\n                  ? `${path}-subCategories`.split('-')\n                  : getSavingPath(path),\n              title: entityTitle,\n            },\n          })\n        : Promise.resolve(false),\n    [path, operationType],\n  );\n\n  return (\n    <EditCategoryContext.Provider value={{ onSetCategoryData: handleSetCategoryData }}>\n      <EditCategoriesDialog\n        visible={visible}\n        onToggle={handleClose}\n        sendData={handleSendData}\n        defaultValues={{ [FORM_FIELDS.CATEGORY_TITLE]: title } as SendDataType}\n        operationTitle={OPERATION_TITLES[operationType]}\n        validateOnMatch={validateOnMatch}\n        formId=\"edit-category\"\n        resetAfterSubmit={RESET_AFTER_SUBMIT_VALUES[operationType]}\n        resetAfterCancel\n        {...(operationType === OPERATION_TYPE.DELETE\n          ? {\n              footerSubmitButton: (\n                <Button type=\"primary\" htmlType=\"submit\" form=\"edit-category\">\n                  Delete\n                </Button>\n              ),\n            }\n          : null)}\n      >\n        {operationType === OPERATION_TYPE.DELETE ? (\n          <>\n            <input type=\"hidden\" name={FORM_FIELDS.CATEGORY_TITLE} />\n            <p>{`Delete the category: ${title}`}</p>\n          </>\n        ) : undefined}\n      </EditCategoriesDialog>\n      {children}\n    </EditCategoryContext.Provider>\n  );\n};\n\nexport default memo(EditCategoryProvider);\n","import React, { memo, createContext, useState, ReactElement, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport uniqid from 'uniqid';\nimport { is, List } from 'immutable';\nimport { TaskForm, FieldValues } from 'patterns';\nimport { startEditTaskProcess } from 'actions';\nimport { getCategories } from 'selectors';\nimport { sagaExecutor, taskValidationSaga } from 'sagas';\nimport FORM_FIELDS from 'constants/field-names';\nimport { NodeInfoType } from 'HOCs';\nimport { EditCategoryContextType, InitialValues } from './EditTaskContext.props';\n\nconst customEqualityCheck = (prev: NodeInfoType[], next: NodeInfoType[]): boolean =>\n  is(List().merge(prev), List().merge(next));\n\nexport const EditTaskContext = createContext<EditCategoryContextType>({\n  onSetTaskData: () => {},\n});\n\nconst initialValues: InitialValues = {\n  [FORM_FIELDS.TASK_TITLE]: '',\n  [FORM_FIELDS.TASK_DESCRIPTION]: '',\n  [FORM_FIELDS.TASK_FINISHED]: false,\n  [FORM_FIELDS.TASK_PLACEMENT]: [''],\n  taskId: '',\n};\n\nconst EditTaskProvider: React.FC<{ children: ReactElement }> = ({ children }) => {\n  const [initialTaskData, setInitialTaskData] = useState<InitialValues>(initialValues);\n\n  const [visible, setVisible] = useState<boolean>(false);\n  const [key, setKey] = useState<string>('');\n  const dispatch = useDispatch();\n\n  const categories = useSelector(getCategories, customEqualityCheck);\n\n  const handleClose = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const handleSetTaskData = useCallback((data: InitialValues) => {\n    setKey(uniqid());\n    setInitialTaskData((previous: InitialValues) => ({ ...previous, ...data }));\n    setVisible(true);\n  }, []);\n\n  const handleSendData = useCallback(\n    ({\n      [FORM_FIELDS.TASK_TITLE]: title,\n      [FORM_FIELDS.TASK_DESCRIPTION]: description,\n      [FORM_FIELDS.TASK_FINISHED]: isCompleted,\n      [FORM_FIELDS.TASK_PLACEMENT]: [categoryId],\n    }: FieldValues) => {\n      dispatch(\n        startEditTaskProcess({\n          path: [initialTaskData[FORM_FIELDS.TASK_PLACEMENT][0], initialTaskData.taskId],\n          newPath: [categoryId, initialTaskData.taskId],\n          title,\n          description,\n          isCompleted,\n        }),\n      );\n      setVisible(false);\n    },\n    [dispatch, initialTaskData],\n  );\n\n  const validateOnMatch = useCallback(\n    (taskTitle: string, [categoryId]: [string]): Promise<boolean> =>\n      sagaExecutor(taskValidationSaga, {\n        payload: {\n          path: categoryId,\n          title: taskTitle,\n          taskId: initialTaskData.taskId,\n        },\n      }),\n    [initialTaskData.taskId],\n  );\n\n  return (\n    <EditTaskContext.Provider value={{ onSetTaskData: handleSetTaskData }}>\n      <TaskForm\n        key={key}\n        nodesInfo={categories}\n        defaultValues={initialTaskData}\n        visible={visible}\n        onClose={handleClose}\n        sendData={handleSendData}\n        validateOnMatch={validateOnMatch}\n      />\n      {children}\n    </EditTaskContext.Provider>\n  );\n};\n\nexport default memo(EditTaskProvider);\n","import React, { memo, useContext } from 'react';\nimport { Category } from 'components';\nimport { EditCategoryContext, OPERATION_TYPE } from 'contexts';\nimport CategoryProps from 'components/Category/Category.props';\n\nconst CategoryContainer: React.FC<Pick<CategoryProps, 'path' | 'title' | 'id'>> = ({\n  id,\n  path,\n  title,\n}) => {\n  const { onSetCategoryData } = useContext(EditCategoryContext);\n\n  return (\n    <Category\n      id={id}\n      path={id}\n      title={title}\n      onOpenAddModal={() => onSetCategoryData({ path, title, operationType: OPERATION_TYPE.ADD })}\n      onOpenEditModal={() => onSetCategoryData({ path, title, operationType: OPERATION_TYPE.EDIT })}\n      onOpenDeleteModal={() =>\n        onSetCategoryData({ path, title, operationType: OPERATION_TYPE.DELETE })\n      }\n      editIconTestId={`${path}-edit`}\n      addIconTestId={`${path}-add`}\n      deleteIconTestId={`${path}-delete`}\n    />\n  );\n};\n\nexport default memo(CategoryContainer);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport generateTree, { StyledTreeNode } from 'HOCs';\nimport { getCategories } from 'selectors';\nimport CategoryContainer from '../CategoryContainer';\n\nconst Tree = generateTree(CategoryContainer);\n\nconst StyledTree = styled(Tree)`\n  & ${StyledTreeNode} {\n    .ant-tree-node-content-wrapper {\n      background-color: rgb(41, 189, 226);\n      border-radius: 10px;\n      color: white;\n    }\n\n    .ant-tree-node-content-wrapper a {\n      color: white;\n    }\n\n    .ant-tree-node-content-wrapper a:hover {\n      color: red;\n    }\n\n    .ant-tree-node-selected {\n      background-color: transparent !important;\n      color: red;\n    }\n\n    .ant-tree-node-selected a {\n      background-color: transparent;\n      color: red;\n    }\n  }\n`;\n\nconst CategoriesTreeContainer = () => {\n  const categories = useSelector(getCategories);\n\n  return <StyledTree nodesInfo={categories} />;\n};\n\nexport default memo(CategoriesTreeContainer);\n","import React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { startAddCategoryProcess } from 'actions';\nimport { AddForm, NAME_TYPE } from 'patterns';\nimport { sagaExecutor, categoryValidationSaga } from 'sagas';\n\nconst AddCategoryContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const handleAddCategory = useCallback(\n    ({ [NAME_TYPE.CATEGORY_TITLE]: categoryTitle }) => {\n      dispatch(startAddCategoryProcess({ title: categoryTitle }));\n    },\n    [dispatch],\n  );\n\n  const validateOnMatch = useCallback((categoryTitle: string): Promise<boolean> => {\n    return sagaExecutor(categoryValidationSaga, {\n      payload: { path: ['categories'], title: categoryTitle },\n    });\n  }, []);\n\n  return (\n    <AddForm\n      name={NAME_TYPE.CATEGORY_TITLE}\n      placeholder=\"Enter name\"\n      onAddItem={handleAddCategory}\n      validateOnMatch={validateOnMatch}\n      addButtonName=\"Add\"\n    />\n  );\n};\n\nexport default memo(AddCategoryContainer);\n","import React, { memo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Header } from 'patterns';\nimport { startUnDoProcess, startReDoProcess } from 'actions';\nimport { getCompletedTasksRatio, getOperationsAmount } from 'selectors';\n\nconst HeaderContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const handleUndo = useCallback(() => dispatch(startUnDoProcess()), [dispatch]);\n\n  const handleRedo = useCallback(() => dispatch(startReDoProcess()), [dispatch]);\n\n  const percentage = useSelector(getCompletedTasksRatio);\n\n  const { unDoAmount, reDoAmount } = useSelector(getOperationsAmount);\n\n  return (\n    <Header\n      percentage={percentage}\n      onUndo={handleUndo}\n      onRedo={handleRedo}\n      isUnDoDisabled={!unDoAmount}\n      isReDoDisabled={!reDoAmount}\n    />\n  );\n};\n\nexport default memo(HeaderContainer);\n","import React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { startAddTaskProcess } from 'actions';\nimport { AddForm, NAME_TYPE } from 'patterns';\nimport { sagaExecutor, taskValidationSaga } from 'sagas';\n\nconst AddTaskContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  const { categoryId } = useParams<{ categoryId: string }>();\n\n  const handleAddTask = useCallback(\n    ({ [NAME_TYPE.TASK_TITLE]: taskTitle }) => {\n      dispatch(startAddTaskProcess({ title: taskTitle, path: [categoryId] }));\n    },\n    [dispatch, categoryId],\n  );\n\n  const validateOnMatch = useCallback(\n    (taskTitle: string): Promise<boolean> => {\n      return sagaExecutor(taskValidationSaga, {\n        payload: { path: categoryId, title: taskTitle, taskId: '' },\n      });\n    },\n    [categoryId],\n  );\n\n  return (\n    <AddForm\n      name={NAME_TYPE.TASK_TITLE}\n      placeholder=\"Enter task title\"\n      onAddItem={handleAddTask}\n      validateOnMatch={validateOnMatch}\n      addButtonName=\"Add task\"\n    />\n  );\n};\n\nexport default memo(AddTaskContainer);\n","import React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Task } from 'patterns';\nimport FORM_FIELDS from 'constants/field-names';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { startEditTaskStatusProcess, switchMapPicker } from 'actions';\nimport { TaskContainerProps } from './TaskContainer.props';\n\nconst TaskContainer: React.FC<TaskContainerProps> = ({\n  title,\n  isCompleted,\n  checkBoxTestId,\n  description,\n  id,\n  categoryId,\n  isChosen,\n  onSetTaskData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleToggleCompleted = useCallback(\n    ({ target: { checked } }: CheckboxChangeEvent) => {\n      dispatch(startEditTaskStatusProcess({ path: [categoryId, id], isCompleted: checked }));\n    },\n    [categoryId, dispatch, id],\n  );\n\n  const handleChoose = useCallback(() => {\n    dispatch(switchMapPicker({ url: [categoryId, id] }));\n  }, [categoryId, dispatch, id]);\n\n  const handleOpenEditModal = useCallback(() => {\n    onSetTaskData({\n      [FORM_FIELDS.TASK_TITLE]: title,\n      [FORM_FIELDS.TASK_DESCRIPTION]: description,\n      [FORM_FIELDS.TASK_FINISHED]: isCompleted,\n      [FORM_FIELDS.TASK_PLACEMENT]: [categoryId],\n      taskId: id as string,\n    });\n  }, [categoryId, description, id, isCompleted, onSetTaskData, title]);\n\n  const handleEnableMap = useCallback(() => {\n    dispatch(switchMapPicker({ url: [categoryId, id], isDisplayed: false }));\n  }, [categoryId, dispatch, id]);\n\n  return (\n    <Task\n      title={title}\n      isChosen={isChosen}\n      isCompleted={isCompleted}\n      toggleComplete={handleToggleCompleted}\n      onChoose={handleChoose}\n      onOpenEditModal={handleOpenEditModal}\n      onEnableMap={handleEnableMap}\n      checkBoxTestId={checkBoxTestId}\n      description={description}\n      id={id}\n    />\n  );\n};\n\nexport default memo(TaskContainer);\n","import React, { memo, useContext, useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { EditTaskContext } from 'contexts';\nimport { List } from 'antd';\nimport styled from 'styled-components';\nimport { getTasksByCategoryId, getChosenTaskUrl, getTasksFilters } from 'selectors';\nimport { JsonTaskType } from 'reducers/state.type';\nimport { is, List as ImmutableList } from 'immutable';\nimport { calculateRatio } from 'actions';\nimport TaskContainer from '../TaskContainer';\nimport { StyledListProps } from './TasksListContainer.props';\n\nconst StyledList = styled((props: StyledListProps) => <List<JsonTaskType> {...props} />)`\n  top: 8px;\n  height: calc(100vh - 15vh - 170px);\n  overflow: auto;\n`;\n\nconst customEqualityCheck = (prev: JsonTaskType[], next: JsonTaskType[]): boolean =>\n  is(ImmutableList().merge(prev), ImmutableList().merge(next));\n\nconst TasksListContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  const { categoryId } = useParams<{ categoryId: string }>();\n  const tasks = useSelector(getTasksByCategoryId(categoryId), customEqualityCheck);\n  const [, taskId] = useSelector(getChosenTaskUrl);\n  const { onSetTaskData } = useContext(EditTaskContext);\n  const { showDone, searchKey } = useSelector(getTasksFilters);\n\n  const filteredTasks = useMemo(\n    () =>\n      tasks.filter(\n        ({ isCompleted, title }) => isCompleted === showDone && title.match(searchKey as string),\n      ),\n    [showDone, tasks, searchKey],\n  );\n\n  useEffect(() => {\n    dispatch(\n      calculateRatio({\n        done: tasks.filter(({ isCompleted }) => isCompleted).length,\n        all: tasks.length,\n      }),\n    );\n  }, [dispatch, tasks]);\n\n  return (\n    <StyledList\n      itemLayout=\"horizontal\"\n      dataSource={filteredTasks}\n      split={false}\n      renderItem={({ id, title, isCompleted, description }) => (\n        <List.Item>\n          <TaskContainer\n            title={title}\n            isCompleted={isCompleted}\n            id={id}\n            description={description}\n            checkBoxTestId={`checkbox-test-${id}`}\n            categoryId={categoryId}\n            isChosen={taskId === id}\n            onSetTaskData={onSetTaskData}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport default memo(TasksListContainer);\n","import React, { memo, useCallback, ChangeEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { showDoneTasks, searchTasks } from 'actions';\nimport { StateObject } from 'reducers';\nimport { TasksFilters } from 'components';\n\nconst TasksFiltersContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { showDone: isDoneShown, searchKey: searchPattern } = useSelector(\n    ({ filterTasks: { showDone, searchKey } }: StateObject) => ({\n      showDone,\n      searchKey,\n    }),\n  );\n\n  const handleSwitchDone = useCallback(\n    ({ target: { checked } }: CheckboxChangeEvent) => {\n      dispatch(showDoneTasks({ showDone: checked }));\n    },\n    [dispatch],\n  );\n\n  const handleChangeSearch = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n      dispatch(searchTasks({ searchKey: value }));\n    },\n    [dispatch],\n  );\n\n  return (\n    <TasksFilters\n      showDone={!!isDoneShown}\n      searchKey={searchPattern || ''}\n      onChangeSearch={handleChangeSearch}\n      onSwitchDone={handleSwitchDone}\n    />\n  );\n};\n\nexport default memo(TasksFiltersContainer);\n","import React, { memo, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { startEditTaskLocationProcess } from 'actions';\nimport { WorldMap } from 'patterns';\nimport { getChosenTaskUrl, getTask } from 'selectors';\nimport { LatLngExpression, LeafletMouseEvent } from 'leaflet';\nimport { JsonTaskType } from 'reducers/state.type';\nimport { is, Map } from 'immutable';\n\nconst customEqualityCheck = (prev: JsonTaskType, next: JsonTaskType): boolean =>\n  is(Map().merge(prev), Map().merge(next));\n\nconst WorldMapContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  const chosenTaskUrl = useSelector(getChosenTaskUrl);\n  const chosenTask = useSelector(getTask(chosenTaskUrl), customEqualityCheck);\n  const taskLocation: LatLngExpression =\n    chosenTask?.location?.toObject() as unknown as LatLngExpression;\n\n  const handleClickLocation = useCallback(\n    ({ latlng }: LeafletMouseEvent) => {\n      if (chosenTaskUrl.length) {\n        dispatch(startEditTaskLocationProcess({ path: chosenTaskUrl, location: latlng }));\n      }\n    },\n    [chosenTaskUrl, dispatch],\n  );\n\n  return (\n    <WorldMap\n      coords={taskLocation && Object.keys(taskLocation).length ? taskLocation : undefined}\n      onClick={handleClickLocation}\n    />\n  );\n};\n\nexport default memo(WorldMapContainer);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport { getVisibilityOfTasks } from 'selectors';\nimport AddTaskContainer from '../AddTaskContainer';\nimport TasksFilersContainer from '../TasksFilersContainer';\nimport TasksListContainer from '../TasksListContainer';\n\nconst StyledContentWrapper = styled.div<{ isDisplayed: boolean }>`\n  padding: 30px 50px;\n  position: relative;\n  z-index: 2;\n  background-color: rgba(0, 0, 0, 0.5);\n  ${({ isDisplayed }) =>\n    !isDisplayed &&\n    css`\n      display: none;\n    `}\n`;\n\nconst ContentContainer: React.FC = () => {\n  const isDisplayed = useSelector(getVisibilityOfTasks);\n\n  return (\n    <StyledContentWrapper isDisplayed={isDisplayed}>\n      <AddTaskContainer />\n      <TasksFilersContainer />\n      <TasksListContainer />\n    </StyledContentWrapper>\n  );\n};\n\nexport default memo(ContentContainer);\n","export default __webpack_public_path__ + \"static/media/background.91c87c46.jpg\";","import { MappedTasksState } from '../state.type';\n\nconst initialMappedTasksState: MappedTasksState = {\n  '1': {\n    '1-t1': {\n      id: '1-t1',\n      title: 'graph',\n      description: 'draw',\n      isCompleted: true,\n      location: {},\n    },\n    '1-t2': {\n      id: '1-t2',\n      title: 'counting',\n      description: 'count',\n      isCompleted: true,\n      location: {},\n    },\n  },\n  '1-1': {\n    '1-1-t1': {\n      id: '1-1-t1',\n      title: 'integral',\n      description: 'find',\n      isCompleted: false,\n      location: {},\n    },\n    '1-1-t2': {\n      id: '1-1-t2',\n      title: 'different',\n      description: 'find',\n      isCompleted: false,\n      location: {},\n    },\n  },\n  '1-2': {\n    '1-2-t1': {\n      id: '1-2-t1',\n      title: 'table',\n      description: 'constit',\n      isCompleted: true,\n      location: {},\n    },\n    '1-2-t2': {\n      id: '1-2-t2',\n      title: 'multi',\n      description: 'count',\n      isCompleted: false,\n      location: {},\n    },\n  },\n  '2': {\n    '2-t1': {\n      id: '2-t1',\n      title: 'map',\n      description: 'study',\n      isCompleted: false,\n      location: {},\n    },\n    '2-t2': {\n      id: '2-t2',\n      title: 'drawing',\n      description: 'draw',\n      isCompleted: false,\n      location: {},\n    },\n  },\n  '2-1': {\n    '2-1-t1': {\n      id: '2-1-t1',\n      title: 'polit',\n      description: 'study',\n      isCompleted: false,\n      location: {},\n    },\n    '2-1-t2': {\n      id: '2-1-t2',\n      title: 'mountain',\n      description: 'study',\n      isCompleted: false,\n      location: {},\n    },\n  },\n};\n\nexport default initialMappedTasksState;\n","import { JsonCategoriesState } from '../state.type';\n\nconst initialState: JsonCategoriesState = {\n  categories: [\n    {\n      id: '1',\n      title: 'Mathematic',\n      subCategories: [\n        {\n          id: '1-1',\n          title: 'highMathematic',\n          subCategories: [],\n        },\n        {\n          id: '1-2',\n          title: 'lowMathematic',\n          subCategories: [],\n        },\n      ],\n    },\n    {\n      id: '2',\n      title: 'Geography',\n      subCategories: [\n        {\n          id: '2-1',\n          title: 'highGeography',\n          subCategories: [\n            {\n              id: '2-1-1',\n              title: 'smallHighGeography',\n              subCategories: [],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  errors: [],\n};\n\nexport { default as initialMappedTasksState } from './initialMappedTasksState';\nexport default initialState;\n","import { handleActions } from 'redux-actions';\nimport { Map, List } from 'immutable';\nimport uniqid from 'uniqid';\nimport { addCategory, addSubCategory, deleteCategory, editCategory, insertCategory } from 'actions';\nimport { UpdateCategoriesPayload } from './payload.type';\nimport { CategoriesFullImmutableState, CategoryImmutableMap, Category } from './state.type';\nimport initialState from './initialState';\n\nconst updateCategories = handleActions<CategoriesFullImmutableState, UpdateCategoriesPayload>(\n  {\n    [addCategory as unknown as string]: {\n      next(state, { payload: { title } }) {\n        return state.update('categories', (categories) =>\n          (categories as List<CategoryImmutableMap>).push(\n            Map<keyof Category, Category[keyof Category]>({\n              id: uniqid(),\n              title,\n              subCategories: List<CategoryImmutableMap>([]),\n            }),\n          ),\n        );\n      },\n    },\n\n    [addSubCategory as unknown as string]: {\n      next(state, { payload: { path, title } }) {\n        return state.updateIn(path, (subCategories) =>\n          (subCategories as List<CategoryImmutableMap>).push(\n            Map<keyof Category, Category[keyof Category]>({\n              id: uniqid(),\n              title,\n              subCategories: List([]),\n            }),\n          ),\n        );\n      },\n    },\n\n    [deleteCategory as unknown as string]: {\n      next(state, { payload: { path, pathParam } }) {\n        return state.deleteIn([...path, pathParam]);\n      },\n    },\n\n    [editCategory as unknown as string]: {\n      next(state, { payload: { path, pathParam, title } }) {\n        return state.updateIn([...path, pathParam], (category) => category.set('title', title));\n      },\n    },\n\n    [insertCategory as unknown as string]: {\n      next(state, { payload: { id, path, pathParam, title, subCategories } }) {\n        return state.updateIn(path, (categories) =>\n          categories.insert(\n            pathParam,\n            Map({\n              id,\n              title,\n              subCategories,\n            }),\n          ),\n        );\n      },\n    },\n  },\n  Map().merge(initialState) as CategoriesFullImmutableState,\n);\n\nexport default updateCategories;\n","import { handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { editTaskStatus, addTask, editTask, deleteTask, editTaskLocation } from 'actions';\nimport { initialMappedTasksState } from './initialState';\nimport { UpdateMappedTasksPayload } from './payload.type';\nimport { ImmutableMappedTasksState, TaskImmutableMap } from './state.type';\n\nconst updateMappedTasks = handleActions<ImmutableMappedTasksState, UpdateMappedTasksPayload>(\n  {\n    [editTaskStatus as unknown as string]: {\n      next(\n        state,\n        {\n          payload: {\n            path: [categoryId, taskId],\n            isCompleted,\n          },\n        },\n      ) {\n        return state.setIn([categoryId, taskId, 'isCompleted'], isCompleted);\n      },\n    },\n    [addTask as unknown as string]: {\n      next(\n        state,\n        {\n          payload: {\n            id,\n            path: [categoryId],\n            title,\n            location,\n          },\n        },\n      ) {\n        return (\n          state.get(categoryId as string) ? state : state.set(categoryId as string, Map({}))\n        ).update(categoryId as string, (tasksMap) =>\n          tasksMap.set(\n            id as string,\n            Map({\n              id,\n              title,\n              location: location || Map({}),\n              isCompleted: false,\n              description: '',\n            }) as TaskImmutableMap,\n          ),\n        );\n      },\n    },\n    [editTask as unknown as string]: {\n      next(state, { payload: { path, newPath, title, description, isCompleted } }) {\n        if (newPath) {\n          const [categoryId, taskId] = newPath;\n          const location = state.getIn([...path, 'location']);\n          return state.deleteIn(path).update(categoryId as string, (tasksMap) =>\n            tasksMap.set(\n              taskId as string,\n              Map({\n                id: taskId,\n                title,\n                location,\n                isCompleted,\n                description,\n              }) as TaskImmutableMap,\n            ),\n          );\n        }\n        return state.updateIn(path, (task) =>\n          task.set('title', title).set('description', description).set('isCompleted', isCompleted),\n        );\n      },\n    },\n    [deleteTask as unknown as string]: {\n      next(\n        state,\n        {\n          payload: {\n            path: [categoryId],\n            pathParam: taskId,\n          },\n        },\n      ) {\n        return state.deleteIn([categoryId, taskId]);\n      },\n    },\n    [editTaskLocation as unknown as string]: {\n      next(\n        state,\n        {\n          payload: {\n            path: [categoryId, taskId],\n            location,\n          },\n        },\n      ) {\n        return state.setIn(\n          [categoryId, taskId, 'location'],\n          Map(location as Record<string, unknown>),\n        );\n      },\n    },\n  },\n  Map().merge(initialMappedTasksState) as ImmutableMappedTasksState,\n);\n\nexport default updateMappedTasks;\n","import { handleActions } from 'redux-actions';\nimport { showDoneTasks, searchTasks } from 'actions';\nimport { TasksFilterPayload } from './payload.type';\nimport { TasksFilterState } from './state.type';\n\nconst filterTasks = handleActions<TasksFilterState, TasksFilterPayload>(\n  {\n    [showDoneTasks as unknown as string]: {\n      next(state, { payload: { showDone } }) {\n        return { ...state, showDone };\n      },\n    },\n\n    [searchTasks as unknown as string]: {\n      next(state, { payload: { searchKey } }) {\n        return { ...state, searchKey };\n      },\n    },\n  },\n  { showDone: Boolean(true), searchKey: '' },\n);\n\nexport default filterTasks;\n","import { handleActions, ReduxCompatibleReducer } from 'redux-actions';\nimport { calculateRatio } from 'actions';\nimport { TaskRatioState } from './state.type';\nimport { TaskRatioPayload } from './payload.type';\n\nconst calculateTaskRatio: ReduxCompatibleReducer<TaskRatioState, TaskRatioPayload> = handleActions(\n  {\n    [calculateRatio as unknown as string]: {\n      next(state, { payload: { done, all } }) {\n        return { done, all };\n      },\n    },\n  },\n  { done: 0, all: 0 },\n);\n\nexport default calculateTaskRatio;\n","import _ from 'lodash';\nimport { handleActions } from 'redux-actions';\nimport { addToReDo, deleteFromReDo, clearReDo } from 'actions';\nimport { ReDoPayload } from './payload.type';\nimport { RedoState } from './state.type';\n\nconst reDo = handleActions<RedoState, ReDoPayload>(\n  {\n    [addToReDo as unknown as string]: {\n      next(state, { payload }) {\n        return { redoOperations: _.concat(state.redoOperations, [payload]) };\n      },\n    },\n\n    [deleteFromReDo as unknown as string]: {\n      next(state) {\n        return { redoOperations: _.dropRight(state.redoOperations) };\n      },\n    },\n\n    [clearReDo as unknown as string]: {\n      next() {\n        return { redoOperations: [] };\n      },\n    },\n  },\n  { redoOperations: [] },\n);\n\nexport default reDo;\n","import _ from 'lodash';\nimport { handleActions } from 'redux-actions';\nimport { addToUnDo, deleteFromUnDo } from 'actions';\nimport { UnDoPayload } from './payload.type';\nimport { UnDoState } from './state.type';\n\nconst unDo = handleActions<UnDoState, UnDoPayload>(\n  {\n    [addToUnDo as unknown as string]: {\n      next(state, { payload }) {\n        return { undoOperations: _.concat(state.undoOperations, [payload]) };\n      },\n    },\n\n    [deleteFromUnDo as unknown as string]: {\n      next(state) {\n        return { undoOperations: _.dropRight(state.undoOperations) };\n      },\n    },\n  },\n  { undoOperations: [] },\n);\n\nexport default unDo;\n","import { handleActions } from 'redux-actions';\nimport { switchMapPicker as pickSituationOnMap } from 'actions';\nimport { PickSituationState } from './state.type';\nimport { PickSituationPayload } from './payload.type';\n\nconst switchMapPicker = handleActions<PickSituationState, PickSituationPayload>(\n  {\n    [pickSituationOnMap as unknown as string]: {\n      next(state, { payload: { isDisplayed, url } }) {\n        if (!url) {\n          return { ...state, isDisplayed };\n        }\n        if (isDisplayed === undefined && url) {\n          return { ...state, url };\n        }\n        return { isDisplayed, url };\n      },\n    },\n  },\n  { isDisplayed: true, url: [] },\n);\n\nexport default switchMapPicker;\n","import {\n  combineReducers,\n  Reducer,\n  StateFromReducersMapObject,\n  ActionFromReducersMapObject,\n} from 'redux';\nimport { ReduxCompatibleReducer } from 'redux-actions';\nimport updateCategories from './updateCategories';\nimport updateMappedTasks from './updateMappedTasks';\nimport filterTasks from './filterTasks';\nimport calculateTaskRatio from './calculateTaskRatio';\nimport reDo from './reDo';\nimport unDo from './unDo';\nimport switchMapPicker from './switchMapPicker';\nimport {\n  CategoriesFullImmutableState,\n  TasksFilterState,\n  TaskRatioState,\n  RedoState,\n  UnDoState,\n  PickSituationState,\n  ImmutableMappedTasksState,\n} from './state.type';\nimport {\n  UpdateCategoriesPayload,\n  TasksFilterPayload,\n  TaskRatioPayload,\n  ReDoPayload,\n  UnDoPayload,\n  PickSituationPayload,\n  UpdateMappedTasksPayload,\n} from './payload.type';\n\nexport type ReducerObject = {\n  updateCategories: ReduxCompatibleReducer<CategoriesFullImmutableState, UpdateCategoriesPayload>;\n  updateMappedTasks: ReduxCompatibleReducer<ImmutableMappedTasksState, UpdateMappedTasksPayload>;\n  filterTasks: ReduxCompatibleReducer<TasksFilterState, TasksFilterPayload>;\n  calculateTaskRatio: ReduxCompatibleReducer<TaskRatioState, TaskRatioPayload>;\n  reDo: ReduxCompatibleReducer<RedoState, ReDoPayload>;\n  unDo: ReduxCompatibleReducer<UnDoState, UnDoPayload>;\n  switchMapPicker: ReduxCompatibleReducer<PickSituationState, PickSituationPayload>;\n};\n\ntype MainReducer = Reducer<\n  StateFromReducersMapObject<ReducerObject>,\n  ActionFromReducersMapObject<ReducerObject>\n>;\n\nexport type StateObject = StateFromReducersMapObject<ReducerObject>;\n\nconst reducer: MainReducer = combineReducers({\n  updateCategories,\n  updateMappedTasks,\n  filterTasks,\n  calculateTaskRatio,\n  reDo,\n  unDo,\n  switchMapPicker,\n});\n\nexport default reducer;\n","import React, { ReactElement } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { all } from 'redux-saga/effects';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Layout } from 'antd';\nimport styled from 'styled-components';\nimport {\n  CategoriesTreeContainer,\n  AddCategoryContainer,\n  HeaderContainer,\n  WorldMapContainer,\n  ContentContainer,\n} from 'containers';\nimport { EditCategoryProvider, EditTaskProvider } from 'contexts';\nimport background from 'assets/images/background.jpg';\nimport rootReducer from './reducers';\nimport {\n  addCategoryWatcher,\n  addSubCategoryWatcher,\n  addTaskWatcher,\n  deleteCategoryWatcher,\n  deleteTaskWatcher,\n  editCategoryWatcher,\n  editTaskWatcher,\n  editTaskStatusWatcher,\n  redoOperationWatcher,\n  undoOperationWatcher,\n  sagaMiddleware,\n  editTaskLocationSaga,\n} from './sagas';\nimport './App.css';\n\nconst { Sider, Header, Content: ContentWrapper } = Layout;\n\nconst StyledSider = styled(Sider)`\n  background: transparent;\n  padding: 30px;\n  & > div > div {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nconst Main = styled(Layout)`\n  background: transparent;\n`;\n\nconst StyledHeader = styled(Header)`\n  background-color: transparent;\n  height: 15%;\n  border-radius: 10px;\n  overflow: hidden;\n`;\n\nconst MainLayout = styled(Layout)`\n  height: 100vh;\n  background: url(${background}) no-repeat;\n  background-size: 100% 100%;\n`;\n\nconst StyledContentWrapper = styled(ContentWrapper)`\n  overflow-x: visible;\n`;\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\nfunction* rootSaga() {\n  yield all([\n    addCategoryWatcher(),\n    addSubCategoryWatcher(),\n    addTaskWatcher(),\n    deleteCategoryWatcher(),\n    deleteTaskWatcher(),\n    editCategoryWatcher(),\n    editTaskWatcher(),\n    editTaskStatusWatcher(),\n    redoOperationWatcher(),\n    undoOperationWatcher(),\n    editTaskLocationSaga(),\n  ]);\n}\n\nsagaMiddleware.run(rootSaga);\n\nexport const Wrapper = ({ children }: { children: ReactElement }): ReactElement => (\n  <Provider store={store}>\n    <HashRouter>{children}</HashRouter>\n  </Provider>\n);\n\nfunction App(): ReactElement {\n  return (\n    <Wrapper>\n      <MainLayout>\n        <StyledHeader>\n          <HeaderContainer />\n        </StyledHeader>\n        <Main hasSider>\n          <StyledSider width=\"30%\">\n            <AddCategoryContainer />\n            <EditCategoryProvider>\n              <CategoriesTreeContainer />\n            </EditCategoryProvider>\n          </StyledSider>\n          <StyledContentWrapper>\n            <WorldMapContainer />\n            <EditTaskProvider>\n              <Route path=\"/:categoryId\">\n                <ContentContainer />\n              </Route>\n            </EditTaskProvider>\n          </StyledContentWrapper>\n        </Main>\n      </MainLayout>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}